<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eric&#39;s Blog</title>
  
  
  <link href="https://ericyy.me/atom.xml" rel="self"/>
  
  <link href="https://ericyy.me/"/>
  <updated>2023-03-22T03:14:07.267Z</updated>
  <id>https://ericyy.me/</id>
  
  <author>
    <name>Eric Yang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 常用命令(3) - 检查网络流量</title>
    <link href="https://ericyy.me/2021-03-18-linux-common-commands-3.html"/>
    <id>https://ericyy.me/2021-03-18-linux-common-commands-3.html</id>
    <published>2021-03-18T04:00:00.000Z</published>
    <updated>2023-03-22T03:14:07.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="检查网络流量"><a href="#检查网络流量" class="headerlink" title="检查网络流量"></a>检查网络流量</h2><h3 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h3><p>Tcpdump 是用于捕获发出和收到的网络流量的工具。在日常工作中经常用来检查调试网络问题。它不单能捕获 TCP 流量，也能捕获 UDP、ARP 和 ICMP 流量。</p><p>首先，tcpdump 需要 root 权限，所以别忘了用 sudo 来执行。</p><h4 id="常用参数及对应的命令组合"><a href="#常用参数及对应的命令组合" class="headerlink" title="常用参数及对应的命令组合"></a>常用参数及对应的命令组合</h4><ul><li><code>-D</code>: 查看所有的网络接口</li><li><code>-i &lt;interface&gt;</code>: 捕获特定网络接口，输出到屏幕</li><li><code>-n</code>: 不反向解析域名。在捕获的记录里，默认情况tcpdump会反向解析所有的IP地址，然后显示域名地址。该参数可以避免这个行为。</li><li><code>-w &lt;file.pcap&gt;</code>: 输出到文件 file.pcap。通常大家会使用<code>.pcap</code>扩展名，表示 packet capture。<ul><li>在输出到文件的时候，内容是不会输出到屏幕的。如果希望查看，可以打开新的终端，然后使用 <code>tcpdump -r file.pcap</code> 命令查看。</li><li>当然，你也可以使用 <code>tcpdump -w file.pcap &amp;</code> 命令。让输出到文件的命令运行在后台。或者使用 <code>-l</code> + <code>tee</code> 命令输出到文件的同时查看。</li><li>推荐使用 Wireshark 来分析捕获的流量日志。</li></ul></li><li><code>-l</code>: 缓存输出，用于输出到屏幕的同时保存到文件。常用命令为 <code>tcpdump -l | tee file.out</code> 或者 <code>tcpdump -l &gt; file.out &amp; tail -f file.out</code></li><li><code>-W 10 -C 200</code>: 当需要运行很长时间并且保存日志的时候，可以指定这两个参数。<code>-C</code> 指定单个文件大小， 单位为MB。<code>-W</code> 文件数量。Tcpdump会自动切分和更新日志。</li><li><code>-A | -X</code> 默认情况下，tcpdump <strong>输出到屏幕</strong>时，仅捕获数据包的headers。如果需要检查包信息，可以加上 <code>-A</code> 以ASCII格式输出，或者 <code>-X</code> 以HEX格式输出。</li></ul><h4 id="过滤流量"><a href="#过滤流量" class="headerlink" title="过滤流量"></a>过滤流量</h4><p>tcpdump使用的是<a href="https://en.wikipedia.org/wiki/Berkeley_Packet_Filter">BPF</a>语法用来作为过滤参数，很接近自然语言。比如，只希望捕获端口27017的TCP流量：<code>tcpdump tcp port 27017</code>。以下是常用的组合：</p><ul><li><code>tcpdump [udp|tcp]</code>: 只捕获 UDP 或 TCP 流量。Tcpdump也支持使用<a href="https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers">IP协议数字</a>的格式。比如 udp 是 17， tcp 是 6，所以这个命令也可以写作 <code>tcpdump proto [17|6]</code>。 </li><li><code>tcpdump host 192.168.1.185</code>: 只捕获跟 host: 192.168.1.185 相关的流量。也可以指定IP范围，比如 <code>tcpdump net 10.10</code> 是捕获10.10.0.0&#x2F;16 相关的所有流量。</li><li><code>tcpdump port 27017</code>: 只捕获跟端口27017相关的流量， 也可以指定端口范围：<code>tcpdump portrange 100-200</code></li><li><code>tcpdump src host 192.168.1.185</code>: 只捕获来自 host: 192.168.1.185 的流量</li><li><code>tcpdump dst port 80</code>: 只捕获访问本机 80 端口的流量</li></ul><p>复杂的过滤可以使用 <code>&amp;&amp;</code>， <code>｜｜</code>， <code>！</code> 或者 <code>and</code> 和 <code>not</code> 等关键词，比如：</p><ul><li><code>tcpdump -n src 192.168.1.185 and not dst port 22</code>: 捕获来自 host: 192.169.1.185 并且目的端口不是22的流量</li><li>还可以加上 <code>()</code> 来实现更复杂的过滤： <code>tcpdump -n &#39;host 192.168.1.185 and (tcp port 80 or tcp port 443)&#39;</code></li></ul><h4 id="几个例子"><a href="#几个例子" class="headerlink" title="几个例子"></a>几个例子</h4><ul><li><p><code>tcpdump -D</code> 来查看所有的网络接口</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># tcpdump -D</span><br><span class="line">1.eth0</span><br><span class="line">2.nflog (Linux netfilter log (NFLOG) interface)</span><br><span class="line">3.nfqueue (Linux netfilter queue (NFQUEUE) interface)</span><br><span class="line">4.any (Pseudo-device that captures on all interfaces)</span><br><span class="line">5.lo [Loopback]</span><br></pre></td></tr></table></figure><ul><li>其中 eth0 是物理网卡。any 比较特殊是包含了所有接口的流量。lo 是本地流量。其他两个我也不知道是什么。</li></ul></li><li><p><code>tcpdump -i &lt;interface&gt;</code> 来查看特定的接口，比如 <code>tcpdump -i any</code>  可以捕获所有接口的所有流量，输出到屏幕。 可以追加 <code>-c &lt;number&gt;</code> 来指定捕获包的数量。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># tcpdump -i any -c 10 -n</span><br><span class="line">tcpdump: data link type PKTAP</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on any, link-type PKTAP (Apple DLT_PKTAP), capture size 262144 bytes</span><br><span class="line">23:23:45.199840 IP 127.0.0.1.57437 &gt; 127.0.0.1.64582: Flags [F.], seq 3146809726, ack 228856637, win 6375, options [nop,nop,TS val 1294890263 ecr 1294763197], length 0</span><br><span class="line">23:23:45.199884 IP 127.0.0.1.57437 &gt; 127.0.0.1.64582: Flags [F.], seq 0, ack 1, win 6375, options [nop,nop,TS val 1294890263 ecr 1294763197], length 0</span><br><span class="line">23:23:45.199903 IP 127.0.0.1.64582 &gt; 127.0.0.1.57437: Flags [.], ack 1, win 6376, options [nop,nop,TS val 1294890263 ecr 1294890263], length 0</span><br><span class="line">23:23:45.199908 IP 127.0.0.1.64582 &gt; 127.0.0.1.57437: Flags [.], ack 1, win 6376, options [nop,nop,TS val 1294890263 ecr 1294890263], length 0</span><br><span class="line">23:23:45.432277 IP 192.168.10.123.63284 &gt; 70.103.220.153.4501: UDP, length 132</span><br><span class="line">23:23:45.511805 IP 70.103.220.153.4501 &gt; 192.168.10.123.63284: UDP, length 132</span><br><span class="line">23:23:45.716903 ARP, Announcement 192.168.10.101, length 28</span><br><span class="line">23:23:46.639929 IP 192.168.10.124.49154 &gt; 255.255.255.255.6667: UDP, length 188</span><br><span class="line">23:23:46.837854 IP 192.168.10.123.64333 &gt; 172.217.6.69.443: Flags [.], seq 1059163531:1059164949, ack 51371873, win 2048, options [nop,nop,TS val 1294891899 ecr 1148464805], length 1418</span><br><span class="line">23:23:46.837860 IP 192.168.10.123.64333 &gt; 172.217.6.69.443: Flags [.], seq 1418:2836, ack 1, win 2048, options [nop,nop,TS val 1294891899 ecr 1148464805], length 1418</span><br><span class="line">10 packets captured</span><br><span class="line">13 packets received by filter</span><br><span class="line">0 packets dropped by kernel</span><br></pre></td></tr></table></figure></li></ul><h4 id="输出日志解析"><a href="#输出日志解析" class="headerlink" title="输出日志解析"></a>输出日志解析</h4><p>典型的结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Timestamp] [Protocol] [Src IP].[Src Port] &gt; [Dst IP].[Dst Port]: [Flags], [Seq], [Ack], [Win Size], [Options], [Data Length]</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">23:25:46.253052 IP 192.168.10.123.64581 &gt; 192.168.10.107.8009: Flags [P.], seq 139835987:139836097, ack 801463949, win 2048, options [nop,nop,TS val 1295011047 ecr 5804669], length 110</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>23:25:46.253052</code> 时间戳</li><li><code>IP</code> 包协议。IP意思是 IPv4</li><li><code>192.168.10.123.64581</code> 来源IP和端口，最后一个 <code>.</code> 后边是端口</li><li><code>&gt;</code> 数据流从源IP到目的IP</li><li><code>192.168.10.107.8009</code> 目的IP和端口，最后一个 <code>.</code> 后边是端口</li><li><code>Flags [P.]</code> TCP 标识。 <code>[P.]</code> 是 发送告知以接收的数据包，用于告知上一个数据包和发送数据。其他的标识包括：<ul><li>[S] - SYN (数据包发送者发起TCP第一次握手)</li><li>[S.] - SYN-ACK (接送者发起第二次握手，并告知上一个数据包接受不了成功)</li><li>[.] - ACK (发送者发起第三次握手，告知接收成功)</li><li>[P] - PSH (发送数据)</li><li>[F] - FIN (发送者告知数据传输完成)</li><li>[R] - RST (接收者发起，表示接收到了意外数据包)</li><li>还有 URG、CWR等</li></ul></li><li><code>seq 139835987:139836097</code><ul><li>当前数据流中包含了完整数据包的第 139835987 到 139836097 byte</li></ul></li><li><code>ack 801463949</code><ul><li>最后的期望的 bytes 数量</li></ul></li><li><code>win 2048</code><ul><li>接收者可以缓存的 bytes</li></ul></li><li><code>options [nop,nop,TS val 1295011047 ecr 5804669]</code><ul><li><code>nop</code>: no operation</li><li><code>TS val</code> TCP 时间戳</li><li><code>ecr</code>: echo reply.</li></ul></li><li><code>length 110</code><ul><li>本次数据流传输的大小 当前是 1024 bytes</li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://linuxize.com/post/tcpdump-command-in-linux/">https://linuxize.com/post/tcpdump-command-in-linux/</a></li><li><a href="https://www.tcpdump.org/manpages/tcpdump.1.html">https://www.tcpdump.org/manpages/tcpdump.1.html</a></li><li><a href="https://en.wikipedia.org/wiki/Berkeley_Packet_Filter">https://en.wikipedia.org/wiki/Berkeley_Packet_Filter</a></li><li><a href="https://www.keycdn.com/support/tcp-flags">https://www.keycdn.com/support/tcp-flags</a></li></ul>]]></content>
    
    
    <summary type="html">Linux 常用命令, tcpdump</summary>
    
    
    
    <category term="编程学习" scheme="https://ericyy.me/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="https://ericyy.me/tags/Linux/"/>
    
    <category term="tcpdump" scheme="https://ericyy.me/tags/tcpdump/"/>
    
  </entry>
  
  <entry>
    <title>Linux 常用命令(2) - 重定向输出和输入, 查看网络端口, 压缩和解压缩</title>
    <link href="https://ericyy.me/2021-03-10-linux-common-commands-2.html"/>
    <id>https://ericyy.me/2021-03-10-linux-common-commands-2.html</id>
    <published>2021-03-10T05:00:00.000Z</published>
    <updated>2023-03-22T03:14:07.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重定向输出和输入"><a href="#重定向输出和输入" class="headerlink" title="重定向输出和输入"></a>重定向输出和输入</h2><p>在 Bash 或者其他Linux shell里，标准的I&#x2F;O流分为：</p><ul><li><code>0</code> - <code>stdin</code> 标准输入</li><li><code>1</code> - <code>stdout</code> 标准输出</li><li><code>2</code> - <code>stderr</code> 标准错误</li></ul><p>从标准输出开始。标准输出是程序正常输出的内容。默认情况下，所有信息都会输出到屏幕上。重定向输出就是捕获程序的输出然后重定向到另一个程序或者文件中。一般用 <code>n&gt;</code> 来实现。<code>n</code> 可以是 <code>0</code>, <code>1</code>, 或者 <code>2</code>。 省略<code>n</code> 默认为 <code>1</code> 即标准输出。</p><p>举个例子， <code>command &gt; file</code> 就是将命令 <code>command</code> 执行的结果输出到文件 <code>file</code> 里。 这个命令也等同于 <code>command 1&gt; file</code>。 同理，<code>command 2&gt; file</code> 就是将命令执行输出到错误重定向到文件里。 如果希望过滤输出，可以重定向到 <code>/dev/null</code> 来实现。比如， <code>command 2&gt; /dev/null</code>，命令执行结果中的错误信息就会被过滤掉。</p><p>那么如何将标准输出和标准错误重定向到一个文件里呢？ <code>command &amp;&gt; file</code>，<code>&amp;</code> 表示同时将 <code>1</code> 和 <code>2</code> 输出到文件里。 还有一种方式可以实现同样的效果：<code>command &gt; file 2&gt;&amp;1</code>，追加 <code>2&gt;&amp;1</code> 是将命令中的输出错误重定向到标准输出中。</p><p>在日常使用中，我们也经常碰到 <code>&gt;&gt;</code> 。不同于 <code>&gt; file</code> 每次执行都会覆盖整个文件， <code>&gt;&gt;</code> 会以追加的方式输出内容到文件。</p><p>最后来说说标准输入 <code>&lt;</code>。用法：<code>command &lt; input-file</code>，是将 <code>input-file</code> 中的内容作为输入提供给 <code>command</code>。这个命令等同于 <code>command 0&lt; input-file</code>。举个例子，<code>grep &quot;ERROR&quot; &lt; /var/log/messages</code>，将文件 <code>/var/log/messages</code> 作为命令 <code>grep</code> 的输入。其效果类似于 <code>cat /var/log/message | grep &quot;ERROR&quot;</code>。</p><h2 id="查看网络端口"><a href="#查看网络端口" class="headerlink" title="查看网络端口"></a>查看网络端口</h2><h3 id="netcat-nc"><a href="#netcat-nc" class="headerlink" title="netcat(nc)"></a>netcat(nc)</h3><p>netcat 是一个使用TCP或者UDP协议读写数据的工具。可以用来检测IP地址或域名端口是否开放。</p><ul><li><p><code>nc -z -v 10.10.8.8 20-80</code></p><ul><li>扫描 10.10.8.8 的TCP端口 20-80，查看哪些是开放的。</li><li><code>-v</code> verbose，输出更多的信息</li><li><code>-z</code> 仅检测开放端口</li></ul></li><li><p><code>nc -z -v 10.10.8.8 20-80 2&gt;&amp;1 | grep succeeded</code></p><ul><li>2&gt;&amp;1 重定向标准输出的错误信息到标准输出中。</li><li>然后通过 grep succeeded来过滤失败的信息。</li></ul></li><li><p><code>nc -z -v -u 10.10.8.8 80</code></p><ul><li><code>-u</code> 仅检测UDP协议</li></ul></li></ul><h2 id="压缩和解压缩"><a href="#压缩和解压缩" class="headerlink" title="压缩和解压缩"></a>压缩和解压缩</h2><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><ul><li>压缩<ul><li><code>tar -czf archive-name.tar.gz file1 file2 dir1...</code><ul><li><code>-c</code> - 表明创建压缩文件</li><li><code>-z</code> - 压缩方式为 gzip</li><li><code>-f</code> - 指定压缩包文件名</li><li><code>file1 file2 dir1...</code> - 被压缩的文件列表或文件目录</li></ul></li></ul></li><li>解压缩<ul><li><code>tar -xvf archive.tar.gz -C /home/linuxize/files</code><ul><li><code>-x</code> - 表明解压缩</li><li><code>-v</code> - 打印更多的详细信息</li><li><code>-f archive.tar.gz</code> - 压缩包文件名</li><li><code>-C /home/linuxize/files</code> - 解压到指定目录</li></ul></li><li><code>tar -xf archive.tar.gz file1 file2</code><ul><li>仅解压文件 file1 和file2</li></ul></li><li><code>tar -xf archive.tar.gz --wildcards &#39;*.js&#39;</code><ul><li>用通配符来需要指定解压的文件</li></ul></li></ul></li><li>列出压缩包里的文件名<ul><li><code>tar -tf archive.tar.gz</code></li></ul></li></ul><h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><ul><li><code>gzip -d file.gz</code><ul><li>解压到当前目录，并删掉压缩包</li><li>指定 <code>-k</code> 可以避免压缩包被删除</li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://linuxize.com/post/bash-redirect-stderr-stdout/">https://linuxize.com/post/bash-redirect-stderr-stdout/</a></li><li><a href="https://tldp.org/LDP/abs/html/io-redirection.html">https://tldp.org/LDP/abs/html/io-redirection.html</a></li><li><a href="https://linuxize.com/post/tcpdump-command-in-linux/">https://linuxize.com/post/tcpdump-command-in-linux/</a></li><li><a href="https://linuxize.com/post/how-to-create-tar-gz-file/">https://linuxize.com/post/how-to-create-tar-gz-file/</a></li><li><a href="https://linuxize.com/post/netcat-nc-command-with-examples/">https://linuxize.com/post/netcat-nc-command-with-examples/</a></li></ul>]]></content>
    
    
    <summary type="html">Linux 常用命令, netcat, tar, gzip</summary>
    
    
    
    <category term="编程学习" scheme="https://ericyy.me/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="https://ericyy.me/tags/Linux/"/>
    
    <category term="stdin" scheme="https://ericyy.me/tags/stdin/"/>
    
    <category term="stdout" scheme="https://ericyy.me/tags/stdout/"/>
    
    <category term="stderr" scheme="https://ericyy.me/tags/stderr/"/>
    
    <category term="netcat" scheme="https://ericyy.me/tags/netcat/"/>
    
    <category term="tar" scheme="https://ericyy.me/tags/tar/"/>
    
    <category term="gzip" scheme="https://ericyy.me/tags/gzip/"/>
    
  </entry>
  
  <entry>
    <title>Linux 常用命令(1) - 检查本地端口, 查看进程, 文件</title>
    <link href="https://ericyy.me/2021-03-03-linux-common-commands-1.html"/>
    <id>https://ericyy.me/2021-03-03-linux-common-commands-1.html</id>
    <published>2021-03-03T05:00:00.000Z</published>
    <updated>2023-03-22T03:14:07.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="检查本地端口"><a href="#检查本地端口" class="headerlink" title="检查本地端口"></a>检查本地端口</h2><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><ul><li><p>大多数linux系统已经内置了这个命令。如果没有，可以通过以下命令安装：</p><ul><li>Ubuntu &amp; Debian: <code>sudo apt install net-tools</code></li><li>CentOS: <code>sudo yum install net-tools</code></li></ul></li><li><p>列出所有在使用的TCP和UDP端口，包括服务名称和 Socket：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo netstat -tunlp</span><br></pre></td></tr></table></figure><ul><li><code>-t</code> - 显示 TCP 端口</li><li><code>-u</code> - 显示 UDP 端口</li><li><code>-n</code> - 直接使用 IP 地址，不通过域名服务器</li><li><code>-l</code> - 仅显示正在监听的端口</li><li><code>-p</code> - 显示正在使用 Socket 的 PID 和程序名称</li></ul></li><li><p>输出结果示例：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo netstat -tunlp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1755/sshd</span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1755/sshd</span><br><span class="line">udp        0      0 0.0.0.0:68              0.0.0.0:*                           1075/dhclient</span><br><span class="line">udp        0      0 0.0.0.0:68              0.0.0.0:*                           1074/dhclient</span><br></pre></td></tr></table></figure><ul><li>Proto - 协议名称.</li><li>Local Address - 程序监听的 IP 和端口</li><li>PID&#x2F;Program name - PID 和程序名称</li></ul></li><li><p>通常情况下我们只需要查看特定的端口监听情况，可以通过 grep 管道命令来实现：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tnlp | grep :22</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1755/sshd</span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1755/sshd</span><br></pre></td></tr></table></figure><ul><li>如果输出结果为空，说明现在没有程序在监听这个端口。</li><li>你也可以通过 grep PID、协议、监听状态等来过滤结果。比如：<ul><li><code>sudo netstat -tunlp | grep 0.0.0.0</code></li><li><code>sudo netstat -tunlp | grep tcp</code></li><li><code>sudo netstat -tunlp | grep sshd</code></li></ul></li></ul></li></ul><h3 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h3><ul><li><p>使用上类似 netstat。优点是速度更快，得到更多TCP状态。</p></li><li><p>示例：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ss -tunlp</span><br><span class="line">Netid State      Recv-Q Send-Q Local Address:Port               Peer Address:Port</span><br><span class="line">udp   UNCONN     0      0               *:68                          *:*                   users:((&quot;dhclient&quot;,pid=1075,fd=6))</span><br><span class="line">udp   UNCONN     0      0               *:68                          *:*                   users:((&quot;dhclient&quot;,pid=1074,fd=6))</span><br><span class="line">tcp   LISTEN     0      128             *:22                          *:*                   users:((&quot;sshd&quot;,pid=1755,fd=3))</span><br><span class="line">tcp   LISTEN     0      128            :::22                         :::*                   users:((&quot;sshd&quot;,pid=1755,fd=4))</span><br></pre></td></tr></table></figure></li></ul><h3 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h3><ul><li><p><code>lsof</code>(list opened files) 是用来查看当前系统打开文件的工具。但是由于在类 unix 的系统中，一切皆文件，所以 lsof 也可以用来查看进程、端口等。</p></li><li><p>输出示例：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">COMMAND     PID   TID             USER   FD      TYPE             DEVICE SIZE/OFF       NODE NAME</span><br><span class="line">systemd       1                   root  cwd       DIR                8,1     4096          2 /</span><br><span class="line">systemd       1                   root  rtd       DIR                8,1     4096          2 /</span><br><span class="line">systemd       1                   root  txt       REG                8,1  1589552      10104 /lib/systemd/systemd</span><br><span class="line">systemd       1                   root  DEL       REG                8,1                2119 /lib/x86_64-linux-gnu/libuuid.so.1.3.0</span><br><span class="line">systemd       1                   root  mem       REG                8,1   162632       2068 /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">systemd       1                   root    0u      CHR                1,3      0t0          6 /dev/null</span><br><span class="line">systemd       1                   root    2u      CHR                1,3      0t0          6 /dev/null</span><br><span class="line">dnsmasq     972                dnsmasq    5u      IPv4             19118      0t0        TCP 127.0.0.1:53 (LISTEN)</span><br><span class="line">sshd       1515                   root    3u      IPv4             22999      0t0        TCP *:ssh (LISTEN)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>Command: 进程相关的命令</li><li>PID: 进程 ID</li><li>TID: 线程 ID。为空的话说明当前是进程。</li><li>User: 用户名或用户ID</li><li>Type: 有超过70种。常见的包括<ul><li>REG: 常规系统文件文件</li><li>DIR: 目录</li><li>FIFO: 先进先出</li><li>CHR: Character special file</li><li>BLK: Block special file</li><li>INET: 网络 socket</li><li>unix: UNIX domain socket</li></ul></li><li>Device: 磁盘的名称</li><li>Size&#x2F;Off: 文件大小或者文件所在的磁盘中的位置</li><li>Node: 文件在磁盘中的索引节点</li><li>Name: 文件挂载点</li><li>FD: 可能是以下几种:<ul><li>文件描述。常见的包括 cwd、rtd、txt、mem 和一些数字等等。其中，<ul><li>cwd 表示当前的工作目录</li><li>rtd 表示根目录</li><li>txt 表示程序的可执行文件</li><li>mem 表示内存映射文件</li><li>mmap 表示内存映射设备</li></ul></li><li>数字描述。以数字表示的，比如标准输入输出文件。数字后面的字母表示进程对该文件的读写模式。<ul><li>u 表示该文件被打开并处于读取&#x2F;写入模式</li><li>r 表示只读模式</li><li>w 表示只写模式</li><li>‘ ‘ 空字符表示未知</li><li>当字母<code>u</code>, <code>r</code>, <code>w</code> 大写的情况下表示该进程拥有对文件的对应操作的锁。</li></ul></li></ul></li></ul></li></ul><h4 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h4><ul><li>查看所有正在监听的TCP端口: <code>lsof -nP -iTCP -sTCP:LISTEN</code><ul><li><code>-n</code> - 不解析域名，直接使用IP地址</li><li><code>-P</code> - 不解析端口，直接使用数字。比如默认情况下 端口22会用<code>ssh</code>来表示。带上这个参数后，会直接显示22。</li><li><code>-iTCP -sTCP:LISTEN</code> - 仅显示网络文件，并且是TCP协议,以及状态为LISTEN</li></ul></li><li>查看特定的端口：<code>lsof -i :22</code><ul><li>只看 TCP：<code>lsof -i TCP:22</code></li></ul></li><li>查看已建立的连接: <code>lsof  -i -s TCP:ESTABLISHED</code></li><li>列出指定进程打开的所有文件： <code>lsof -p 588</code></li><li>查看指定文件正在被哪些进程访问： <code>lsof -t /var/log/auth.log</code></li></ul><h2 id="管理进程"><a href="#管理进程" class="headerlink" title="管理进程"></a>管理进程</h2><h3 id="查看进程-ps"><a href="#查看进程-ps" class="headerlink" title="查看进程 - ps"></a>查看进程 - ps</h3><ul><li><p><code>ps aux</code> - BSD风格，没有 <code>-</code></p><ul><li><code>a</code> - 显示所有用户的所有的进程</li><li><code>u</code> - 提供更多细节，包括进程所属用户，以及内存使用</li><li><code>x</code> - 显示所有程序，包括没有 attacth 终端的</li></ul></li><li><p><code>ps -elf</code> - UNIX风格，一个 <code>-</code>。（其实还有GNU风格，是两个<code>-</code>）</p><ul><li><code>-l</code> &#x2F; <code>-f</code> - 类似于<code>u</code>，显示更多细节，只是侧重不同。两个参数都包含了PPID(父进程ID)</li><li><code>-e</code> - 类似于 <code>x</code>，显示所有程序</li></ul></li><li><p>示例：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># ps aux | head -10</span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root         8  0.0  0.0      0     0 ?        S    Feb25   0:00 [rcu_bh]</span><br><span class="line">root         9  0.0  0.0      0     0 ?        R    Feb25   1:02 [rcu_sched]</span><br><span class="line">root        10  0.0  0.0      0     0 ?        S&lt;   Feb25   0:00 [lru-add-drain]</span><br><span class="line">root        11  0.0  0.0      0     0 ?        S    Feb25   0:04 [watchdog/0]</span><br><span class="line">root        13  0.0  0.0      0     0 ?        S    Feb25   0:00 [kdevtmpfs]</span><br><span class="line">root        14  0.0  0.0      0     0 ?        S&lt;   Feb25   0:00 [netns]</span><br><span class="line">root        15  0.0  0.0      0     0 ?        S    Feb25   0:00 [khungtaskd]</span><br><span class="line">root        16  0.0  0.0      0     0 ?        S&lt;   Feb25   0:00 [writeback]</span><br><span class="line">root        17  0.0  0.0      0     0 ?        S&lt;   Feb25   0:00 [kintegrityd]</span><br></pre></td></tr></table></figure><ul><li><code>USER</code> - 用户</li><li><code>PID</code> - 进程ID</li><li><code>%CPU</code> - CPU占有率</li><li><code>%MEM</code> - 内存占有率</li><li><code>VSZ</code> - 虚拟内存占有大小(KB)</li><li><code>RSS</code> - 物理内存占有大小</li><li><code>STAT</code> - 进程状态 Z (僵死), S (中断), R (运行), T (停止), D (不可中断)</li><li><code>START</code> - 进程开始运行时间</li></ul></li></ul><h3 id="重启-x2F-杀死进程-kill-x2F-pkill"><a href="#重启-x2F-杀死进程-kill-x2F-pkill" class="headerlink" title="重启&#x2F;杀死进程 - kill &#x2F; pkill"></a>重启&#x2F;杀死进程 - kill &#x2F; pkill</h3><ul><li><code>kill [OPTIONS] [PID]...</code></li><li>常用参数：<ul><li><code>1</code>(HUP) - 重新加载进程</li><li><code>9</code>(KILL) - 直接杀死进程</li><li><code>15</code>(TERM) - 逐步停止进程</li><li><code>kill -l</code> 可以查看更多参数</li></ul></li><li>用法：<ol><li>使用数字 - <code>kill -1 &lt;PID&gt;</code> 或者 <code>kill -s 1 &lt;PID&gt;</code></li><li>使用<code>SIG</code>前缀 - <code>kill -SIGHUP &lt;PID&gt;</code> 或者 <code>kill -s SIGHUP &lt;PID&gt;</code></li><li>不使用<code>SIG</code>前缀 - <code>kill -HUP &lt;PID&gt;</code> 或者 <code>kill -s HUP &lt;PID&gt;</code></li></ol></li><li>复合用法：<ul><li><code>kill -9 $(pidof mongod)</code><ul><li><code>pidof mongod</code> 会输出 mongod的PID, 作为变量传递给 kill命令</li></ul></li></ul></li><li>更多信号： <a href="https://en.wikipedia.org/wiki/Signal_(IPC)">https://en.wikipedia.org/wiki/Signal_(IPC)</a></li></ul><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><ul><li>对比<code>more</code>的优点是，不会一次性加载整个文件。速度会快很多。</li><li>常用命令：<ul><li><code>less +5 /var/log/auth.log</code> 从第五行开始</li><li><code>less -N /var/log/auth.log</code> 显示行数</li><li><code>less -5 /var/log/auth.log</code> 按空格或回车时默认翻整页，<code>-5</code> 指定每页为5行</li></ul></li><li>在查看文件时<ul><li>可以使用 <code>/keyword</code> 来查找关键词，然后使用<code>n</code>或<code>N</code>来查找下一个或上一个</li><li><code>gg</code>回到顶部，G至底部</li><li><code>q</code> 退出阅读文件</li></ul></li></ul><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><ul><li>默认输出所有文本到终端。可搭配less使用：<ul><li><code>cat /var/log/auth.log | less</code> &#x3D; <code>less /var/log/auth.log</code></li></ul></li><li>常用：<ul><li><code>cat -n /var/log/auth.log</code> 显示行数</li><li><code>cat -b /var/log/auth.log</code> 过滤空行后，显示行数。会覆盖 <code>-n</code></li></ul></li></ul><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>应该是最简单的输出命令了。类似java&#x2F;python的print方法。</p><ul><li><code>echo &quot;hello world&quot; &gt; file.txt</code></li></ul><h3 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h3><p>从标准输入流中读取并同时写入多个文件。</p><p>常用参数：</p><ul><li><code>-a</code> - 以追加的方式写入，不覆盖文件已有文本。</li></ul><p>常用命令：</p><ul><li><code>command | tee file1.out file2.out file3.out</code></li></ul><p>一个特殊的使用场景：</p><p>当使用 <code>echo</code> 输入文本到 没有权限的文件时：<code>sudo echo &quot;text&quot; &gt;&gt; /etc/hello.conf</code> 是会失败的。因为重定向 <code>&gt;</code> 不是 sudo 执行的。这个时候可以使用 <code>tee</code> 解决： <code>echo &quot;text&quot; | sudo tee -a /etc/hello.conf</code></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>Mac 里的 <code>netstat</code> 跟 Linux 差异很大。比如 <code>-p</code> 在 Linux 里是指定是否查看 PID，但在 Mac 里是用来指定协议的 – <code>-p tcp</code>。为了避免搞混，建议在 Mac 里使用 <code>lsof</code> 代替。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://linuxize.com/post/check-listening-ports-linux/">https://linuxize.com/post/check-listening-ports-linux/</a></li><li><a href="https://computingforgeeks.com/netstat-vs-ss-usage-guide-linux/">https://computingforgeeks.com/netstat-vs-ss-usage-guide-linux/</a></li><li><a href="https://www.howtogeek.com/426031/how-to-use-the-linux-lsof-command/">https://www.howtogeek.com/426031/how-to-use-the-linux-lsof-command/</a></li><li><a href="https://www.tecmint.com/linux-more-command-and-less-command-examples/">https://www.tecmint.com/linux-more-command-and-less-command-examples/</a></li><li><a href="https://www.jianshu.com/p/be0c534c6a41">https://www.jianshu.com/p/be0c534c6a41</a></li><li><a href="https://linuxize.com/post/ps-command-in-linux/">https://linuxize.com/post/ps-command-in-linux/</a></li><li><a href="https://www.runoob.com/linux/linux-comm-ps.html">https://www.runoob.com/linux/linux-comm-ps.html</a></li><li><a href="https://www.linuxcool.com/ps">https://www.linuxcool.com/ps</a></li></ul>]]></content>
    
    
    <summary type="html">Linux 常用命令, ps, netstat, ss, lsof, less, cat, kill, tee</summary>
    
    
    
    <category term="编程学习" scheme="https://ericyy.me/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="https://ericyy.me/tags/Linux/"/>
    
    <category term="ps" scheme="https://ericyy.me/tags/ps/"/>
    
    <category term="netstat" scheme="https://ericyy.me/tags/netstat/"/>
    
    <category term="ss" scheme="https://ericyy.me/tags/ss/"/>
    
    <category term="lsof" scheme="https://ericyy.me/tags/lsof/"/>
    
    <category term="less" scheme="https://ericyy.me/tags/less/"/>
    
    <category term="cat" scheme="https://ericyy.me/tags/cat/"/>
    
    <category term="kill" scheme="https://ericyy.me/tags/kill/"/>
    
    <category term="tee" scheme="https://ericyy.me/tags/tee/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 Tmux</title>
    <link href="https://ericyy.me/2021-02-28-get-start-with-tmux.html"/>
    <id>https://ericyy.me/2021-02-28-get-start-with-tmux.html</id>
    <published>2021-02-28T05:00:00.000Z</published>
    <updated>2023-03-22T03:14:07.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tmux-是什么？"><a href="#Tmux-是什么？" class="headerlink" title="Tmux 是什么？"></a>Tmux 是什么？</h2><p>Tmux 是终端的多窗口工具，跟 screen 的功能差不多，能够将当前所有窗口的状态保存到session (会话)里并挂起，之后可以用 reattach session 的方式重新恢复。不同于 screen 的是，tmux能够在一个窗口添加多个面板。比较常用的场景比如，开两个面板，一个打开 vim， 一个用来运行命令；再比如，需要同时操作多个服务器的时候，打开多个面板，同步输入到所有面板上去。这样就能在多个服务器上同时执行同一条命令。</p><ul><li>安装：<ul><li>Ubuntu &amp; Debian: <code>sudo apt install tmux</code></li><li>CentOS: <code>sudo yum install tmux</code></li><li>macOS: <code>brew install tmux</code><ul><li>需要先安装 <a href="https://brew.sh/index_zh-cn">HomeBrew</a></li></ul></li></ul></li></ul><h2 id="什么是-session-以及如何管理-session-？"><a href="#什么是-session-以及如何管理-session-？" class="headerlink" title="什么是 session 以及如何管理 session ？"></a>什么是 session 以及如何管理 session ？</h2><ul><li><p>在终端输入<code>tmux</code> 后，窗口会自动创建一个session 。所有的操作都会在这个 session 中进行。比如创建多个面板，在面板之间切换等等。session 可以被保存和恢复。比如你在一个 session 中打开了很多窗口，但是需要重启电脑，这个时候就可把 session 保存起来，然后重启之后恢复 session 来继续工作。</p></li><li><p>新建 session</p><ul><li><code>tmux</code> 或者 <code>tmux new</code></li><li><code>tmux new -s &lt;session_name&gt; [-n &lt;window_name]</code> 指定 session 的名字和窗口的名字</li></ul></li><li><p>离开 session</p><ul><li><code>Ctrl+b d</code>: 挂起session，可以随时恢复</li></ul></li><li><p>恢复 session</p><ul><li><code>tmux a</code>: 恢复最近的session</li><li><code>tmux a -t &lt;session_name&gt;</code>: 恢复制定的session</li></ul></li><li><p>删除 session</p><ul><li>删除当前的session 只需要 exit 即可</li><li>删除挂起的session: <code>tmux kill-session -t &lt;session_name&gt;</code></li></ul></li></ul><h2 id="常用的管理窗口-x2F-面板快捷键"><a href="#常用的管理窗口-x2F-面板快捷键" class="headerlink" title="常用的管理窗口&#x2F;面板快捷键"></a>常用的管理窗口&#x2F;面板快捷键</h2><p>刚开始使用tmux的时候，快捷键有点不太适应。比如<code>Ctrl+b c</code>，我们正常情况下是按下<code>Ctrl</code>和<code>b</code>的同时按<code>c</code>。但是在tmux的session里，是按下<code>Ctrl+b</code>松开，然后按c。<code>Ctrl+b</code>用来激活命令模式。（以下用 <code>&lt;prefix&gt;</code> 代替 <code>Ctrl+b</code>）</p><ul><li><code>&lt;prefix&gt; c</code>: 创建新的窗口</li><li><code>&lt;prefix&gt; w</code>: 打开窗口列表</li><li><code>&lt;prefix&gt; 1</code>: 切换至窗口 1 （或任意数字）</li><li><code>&lt;prefix&gt; ,</code>: 重命名当前窗口</li><li><code>&lt;prefix&gt; %</code>: 水平切分当前面板</li><li><code>&lt;prefix&gt; &quot;</code>: 垂直切分当前面板</li><li><code>&lt;prefix&gt; o</code>: 切换到下一个面板</li><li><code>&lt;prefix&gt; ;</code>: 在上一个和下一个面板之间切换</li><li><code>&lt;prefix&gt; x</code>: 关闭当前面板</li></ul><p>说实话，我并没有记住所有的快捷键。对我来说，这些快捷键都太奇怪了。所以我做了很多自定义配置。</p><h2 id="其他更有趣的用法"><a href="#其他更有趣的用法" class="headerlink" title="其他更有趣的用法"></a>其他更有趣的用法</h2><p><code>.tmux.conf</code> 是tmux的配置文件，默认放在<code>~</code>目录下。Github上有很多人分享自己的配置。我大概搜了下做了下调整，写了个自己的：<a href="https://github.com/erictt/dotfiles/blob/master/tmux/.tmux.conf">https://github.com/erictt/dotfiles/blob/master/tmux/.tmux.conf</a></p><ul><li><p>激活快捷键修改成了<code>Ctrl+a</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unbind C-b</span><br><span class="line">set -g prefix C-a</span><br><span class="line">bind a send-prefix</span><br></pre></td></tr></table></figure></li><li><p>visual mode里用<code>v</code>来选中文字， <code>y</code>用来复制。比较可惜的是，不知道怎么把<code>p</code>配置成粘贴。好像和默认快捷键有冲突。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Use vi mode to copy</span><br><span class="line">bind-key -T copy-mode-vi v send-keys -X begin-selection</span><br><span class="line">bind-key -T copy-mode-vi y send-keys -X copy-selection</span><br><span class="line">bind-key -T copy-mode-vi r send-keys -X rectangle-toggle</span><br></pre></td></tr></table></figure></li><li><p><code>&lt;prefix&gt; + e</code> 同时操控所有pane, <code>&lt;prefix&gt; + E</code> 取消</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># easily toggle synchronization (mnemonic: e is for echo)</span><br><span class="line"># sends input to all panes in a given window.</span><br><span class="line">bind e setw synchronize-panes on</span><br><span class="line">bind E setw synchronize-panes off</span><br></pre></td></tr></table></figure></li><li><p><code>&lt;prefix&gt; + v</code> 垂直切分窗口，<code>&lt;prefix&gt; + s</code> 水平切分窗口</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Create splits and vertical splits</span><br><span class="line">bind-key v split-window -h -p 50 -c &quot;#&#123;pane_current_path&#125;&quot;</span><br><span class="line">bind-key ^V split-window -h -p 50 -c &quot;#&#123;pane_current_path&#125;&quot;</span><br><span class="line">bind-key s split-window -p 50 -c &quot;#&#123;pane_current_path&#125;&quot;</span><br><span class="line">bind-key ^S split-window -p 50 -c &quot;#&#123;pane_current_path&#125;&quot;</span><br></pre></td></tr></table></figure></li><li><p>用鼠标来调整窗口大小、切换window&#x2F;pane</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># mouse behavior</span><br><span class="line">set-window-option -g mouse on</span><br><span class="line"># Using set -gq instead of set -g will silence the unknown option error, while still setting it on old versions of tmux</span><br><span class="line">setw -gq mode-mouse on</span><br><span class="line">set -gq mouse-select-pane on</span><br><span class="line">set -gq mouse-resize-pane on</span><br><span class="line">set -gq mouse-select-window on</span><br></pre></td></tr></table></figure></li><li><p>插件 <code>christoomey/vim-tmux-navigator</code>。可以直接使用快捷键<code>Ctrl + hjkl</code> 来切换pane</p></li></ul><h2 id="CheatSheet"><a href="#CheatSheet" class="headerlink" title="CheatSheet"></a>CheatSheet</h2><p>忘记按键的话，可以在这个网站上搜索。</p><ul><li><a href="https://tmuxcheatsheet.com/">https://tmuxcheatsheet.com/</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/tmux/tmux/wiki/Getting-Started">https://github.com/tmux/tmux/wiki/Getting-Started</a></li><li><a href="https://linuxize.com/post/getting-started-with-tmux/">https://linuxize.com/post/getting-started-with-tmux/</a></li></ul>]]></content>
    
    
    <summary type="html">如何使用 Tmux</summary>
    
    
    
    <category term="编程学习" scheme="https://ericyy.me/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="https://ericyy.me/tags/Linux/"/>
    
    <category term="Tmux" scheme="https://ericyy.me/tags/Tmux/"/>
    
  </entry>
  
  <entry>
    <title>我是如何管理工作和生活日常的？敏捷开发+GTD</title>
    <link href="https://ericyy.me/2020-04-26-gtd-plan.html"/>
    <id>https://ericyy.me/2020-04-26-gtd-plan.html</id>
    <published>2020-04-26T04:00:00.000Z</published>
    <updated>2022-02-12T20:53:10.509Z</updated>
    
    <content type="html"><![CDATA[<p>工具：OmniFocus + Trello + 邮箱 + 日历</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><ul><li>我的初衷是把生活和工作中的琐事和短期长期目标管理起来，让每天做事情的效率更高点。不过如何在效率和压力之间找到平衡是一直困扰我的事情。想做的事情太多，时间太少，效率太低，没法儿做到尽善尽美。所以我还在不断探索中。</li><li>是否需要把所有事情都管理起来？David Allen的那本书是推荐这么做的。目的是让自己更可能的信任整个系统。我并不打算怎么做。因为我并不觉得所有事情都需要“管理”，管理的目的是<strong>规划</strong>、<strong>效率</strong>和<strong>提醒</strong>。所以无论怎么设计，能够帮助到我做到那三点，我都认为是成功的。</li><li>工具的选择？其实现在市场上GTD类的工具不要太多。我用OmniFocus来管理日常的唯一原因是，我很早就购买了。其他的，比如Trello、日历、邮箱都是免费的。</li></ul><h3 id="怎么规划自己的事情？"><a href="#怎么规划自己的事情？" class="headerlink" title="怎么规划自己的事情？"></a>怎么规划自己的事情？</h3><p>这个要谈到 David Allen 的方法了。 如果真的打算用GTD的方法来管理自己的时间，最好先找个没事儿做的一天早上，准备2-3个小时的事情规划。David Allen 的方法一共分五步：<strong>收集</strong> -&gt; <strong>处理</strong> -&gt; <strong>整理</strong> -&gt; <strong>回顾</strong> -&gt; <strong>执行</strong>。</p><ol><li>收集<ul><li>目的是清空大脑，让自己可以每天什么都不用<strong>惦记</strong>着。所有的事情都列出来，不用很细，比如想学画画、想读老舍的四世同堂、明天要去剪头发、后天要给女朋友挑礼物等等。事无巨细，一直列到再也想不出来什么事情为止。</li></ul></li><li>处理<ul><li>逐条分析自己的清单，目的是分清什么是能做的，什么不能做的，什么是最近要做的，什么是未来要做的，还有什么是无意义的事情。我们每天都会有很多念头和想做的事情，如何让自己的精力集中在有意义的事情上并不是一件容易的事情，需要长期的训练自己的大脑。(说实话，我还没有做到。) 二八定律讲到，我们80%的成果，是从20%的努力得到的。处理的目的就是让自己明白什么是重要的事情，而且在自己精力好的时候做重要的事情。最大化自己的成果。</li></ul></li><li>整理<ul><li>目的是让自己的清单具有<strong>可行性</strong>且<strong>合理</strong>。比如学画画这件事，需要收集学画画的资料、工具以及具体时间规划。那么这一步就是要将这些事情拆分整理分类。第一天做什么、第二天做什么一直到完成这个事情。需要注意的是，这并非是在今天做什么和明天做什么，因为每天都在变化，我们不能把事情计划得那么绝对，除非是考试等有deadline的事情。</li><li>在这一步，我们还需要区分事情本身需要的精力和时间。在一天中，人的精力不会一直是饱满的，事情也是。在精力好的时候做需要高度集中精力的，精力不好的时候做不太需要精力的事情是最有效的利用时间的方法。</li></ul></li><li>回顾<ul><li>每周花时间对自己的所有事情进行 回顾 并做调整是很重要的。目的在于修正我们对自己时间安排的合理性以及调整接下来要做的事情。我们总会或高或低的估计自己的能力。每周的回顾可以让我们不断的调整，找到最适合自己的方式。</li></ul></li><li>执行<ul><li>这点看上去有点废话。所有的计划没有执行等于零。不过如何有效率地执行就是个有意思的问题了。GTD中提到，我们可以从四个维度分析我们此时此刻应该做什么–情境、时间、精力和重要性。我们现在在处在什么状态，有多长时间、精力是否充沛以及哪件事情更重要。说白了就是对的时间做对的事情。这其实也是个探索和自我认知的过程，需要不断的尝试去发现最适合自己的。</li></ul></li></ol><h2 id="几个工具如何一起使用？"><a href="#几个工具如何一起使用？" class="headerlink" title="几个工具如何一起使用？"></a>几个工具如何一起使用？</h2><h3 id="日历"><a href="#日历" class="headerlink" title="日历"></a>日历</h3><ul><li>我用的是Fantasical 2 客户端。但真正用起来发现Apple自带的日历其实已经够了。</li><li>日历对我来说，是一个被动提醒工具。需要特定的时间&#x2F;地点需要的事情，比如换雪胎、买卖大头菜（最近在玩动森）、交房租等等，我都会放到日历里边。这也是GTD那本书推荐的方法。工作方面，所有的会议邀请也都会在日历里。所以一天中必须做的事情都在里边了。</li><li>日历有个好处是可以邀请其他人。有些事情需要其他人一起完成的。通知别人用日历再方便不过了。</li></ul><h3 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h3><ul><li>我工作和个人的邮箱都是<strong>Gmail</strong>为主，所以不用来会切换邮件客户端。即便有好几个不同的邮箱，Spark、Airmail等等都是很好的聚合工具。每天早上我会例行清空收件箱。需要以后处理的，工作的放Trello，个人的放OmniFocus的Inbox或者日历里。</li></ul><h3 id="Trello"><a href="#Trello" class="headerlink" title="Trello"></a>Trello</h3><ul><li>由于我工作需要定期评估，我需要整理自己一年内做的所有事情。公司在用Jira，但对我来说太笨重了，而且我的任务分布在好几个项目里，没法儿在一个Kanban里看到，很麻烦。所以我选择全部放到<strong>Trello</strong>里来管理。</li><li>具体的管理就是敏捷开发的那一套。很多人都很熟悉。我分了Todo、Backlog、Doing、Review、Done、Abandoned几个list，基本也代表了我的整个工作流。任务出现的时候，就先放到Todo里（如果紧急，直接跳过Backlog到Doing里去）。然后分析任务的时间需求、紧急性，选择接下来要做的放到Backlog。开始做的时候，就放到Doing里。完成的时候放到回顾里等待。最后进入Done里。其中：<ul><li>Backlog和Doing里一般不会超过三个card。太多就丧失了敏捷开发的意义。</li><li>回顾不单单是Code Review、Peer Review，我把部署也算作回顾的一部分。</li><li>Done 我会每半年创建一个新的list。比如<code>Done[2020](01/01-)</code>是我现在在用的。<code>Done[2019](07/01-12/31)</code> 是去年下半年所有完成的任务。因为做的事情太多，全放在一个<code>Done</code>里太长了。</li><li>Abandoned 是本来计划做，最后由于各种原因中止或者撤销的。对我来说，它类似日志的作用，做个记录而已。</li></ul></li></ul><h3 id="OmniFocus"><a href="#OmniFocus" class="headerlink" title="OmniFocus"></a>OmniFocus</h3><ul><li>任务按照以下维度切分：<ul><li>项目类别 – 生活日常、想学的、必须学的、英语考试<ul><li>英语是特殊需求，单独做了分类</li></ul></li><li>精力需求指数 – 高、中、低</li><li>优先级 – 高、低。即有没有加 flag</li></ul></li><li>这是我的 OmniFocus 打开后的默认界面：<ul><li><img src="https://i.imgur.com/o6hwvwr.jpg"></li></ul></li><li>每天早晨起来后打开 OmniFocus 查看 <code>Next</code> 即可知道接下来需要做的事情。</li></ul><h4 id="透视图配置"><a href="#透视图配置" class="headerlink" title="透视图配置"></a>透视图配置</h4><ul><li>除了OmniFocus自带的 Inbox、Projects、Tags、Forecast、Flagged、Review和Completed 外，我创建了<code>Next</code>和<code>Waiting</code>两个自定义的透视图。</li><li><code>Next</code> 是用来查看今天接下来能做的事情。<ul><li>配置很简单： 只选择First Available就够了。</li></ul></li><li><code>Waiting</code> 是用来记录接下来一段时间内选择做的事情。在每周回顾的时候把所有希望接下来做的事情都加上<code>Picked</code>的标签。<ul><li><img src="https://i.imgur.com/8nyvah0.jpg" style="width: 300px" /></li></ul></li></ul><h4 id="标签配置"><a href="#标签配置" class="headerlink" title="标签配置"></a>标签配置</h4><ul><li><img src="https://i.imgur.com/CweaNRb.jpg" style="width: 200px" /></li><li>我给每个标签都加上emoji，这样所有任务看起来更直观一点。比如<code>High Energy</code> 是🐝， <code>Low Energy</code> 是🐢。</li></ul><h4 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h4><ul><li><img src="https://i.imgur.com/LwWEBhX.jpg" style="width: 300px" /></li><li>项目本身是包含了短期和长期目标以及整体规划的地方。我现在是软件工程师，未来的目标是成为机器学习工程师，然后还希望能够培养弹钢琴和阅读的爱好。那么<ul><li><code>生活日常</code> 就是日常的琐事。比如拖地、给狗狗剪指甲啥的。需要完成一次，defer下一次。</li><li><code>想学的</code>就是钢琴、哲学和阅读感兴趣的书,</li><li><code>必须学的</code>就是机器学习相关的课程以及工作相关的知识。</li></ul></li></ul><h2 id="流程规划"><a href="#流程规划" class="headerlink" title="流程规划"></a>流程规划</h2><ul><li>早上起来花十分钟查看邮件，需要记录的事情扔到 Trello 的 Todo 或者 OmniFocus 的 Inbox 里待进一步处理。</li><li>如果是工作日，从Trello开始计划今天的安排。如果是休息时间，直接略过 Trello，只看OmniFocus。一天结束后，不管进展怎么样，我都会花几分钟再 回顾 下这两个地方，保持更新。</li><li>在日常生活工作中，会遇到三类任务：1）已经规划好的任务；2）突然出现的任务；3）新的任务。<ul><li>正常情况下按计划好的时间安排进行即可。</li><li>当有突然出现的任务时，考虑其紧急程度和需要完成的时间。如果2分钟内可完成，马上去做。如果不能，那么分析任务的复杂程度，用标签管理起来。Trello 和 OmniFocus 都有很好用的额标签功能。如果是未来某天需要做的事情，放到日历里。</li><li>当有新的任务出现时，放到 Trello 的 Todo 或者 OmniFocus 的 Inbox 里，等到时间允许或周末 回顾 时进行分类整理。</li></ul></li><li>每周进行 回顾。<ul><li>每周周一回顾 Trello 。搞清楚任务的优先级、是否需要其他资源、是否在等待其他人的进度等等。我习惯自己脑子里有个大概的规划，这样做起事情来会更有效率。</li><li>每周周末回顾 OmniFocus。将接下来计划做的事情加上<code>Picked</code>标签。 这样当天能做的任务，会出现在<code>Next</code>透视图里。接下来能做的事情会出现在<code>Waiting</code>透视图里。</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>我参考了 David Allen 的那本 GTD 的书，但是并没有完全按照他的设计来做。原因是，我已经有了一些对我有效的时间管理经验，不希望完全照搬别人的想法。当然我其实也没有那么多的任务需要管理，使用工具管理的目的是让自己不要有太大的压力工作和学习，以及优化自己的效率。整本书对我影响最大的是，所有任务的目标都要明确。这样在整理和细化任务的时候思路能够清晰明了。</li></ul>]]></content>
    
    
    <summary type="html">我是如何管理工作和生活日常的？敏捷开发+GTD</summary>
    
    
    
    <category term="生活随想" scheme="https://ericyy.me/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="GTD" scheme="https://ericyy.me/tags/GTD/"/>
    
  </entry>
  
  <entry>
    <title>加拿大个税以及注册退休金计划(RRSP)和免税储蓄账户(TFSA)</title>
    <link href="https://ericyy.me/2019-03-23-canada-personal-tax-rrsp-and-tfsa.html"/>
    <id>https://ericyy.me/2019-03-23-canada-personal-tax-rrsp-and-tfsa.html</id>
    <published>2019-03-23T04:00:00.000Z</published>
    <updated>2022-02-12T20:53:10.508Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在加拿大开始工作几个月了，一直对注册退休金计划（RRSP）和免税储蓄账户（TFSA）不是特别了解。最近在搜索引擎和同事还有银行顾问的帮助下终于弄明白了这几个概念。记录一下，以免自己以后忘了。</li></ul><h2 id="个人税率制度"><a href="#个人税率制度" class="headerlink" title="个人税率制度"></a>个人税率制度</h2><ul><li>加拿大实施的阶梯税率制度，以2018年在安大略省收入为10W&#x2F;年为例，平均税率（Average Tax Rate）是24.63%, 边际税率（Marginal Tax Rate）是43.41%。也就是说，收入缴纳的税款是10W*24.63%&#x3D;24,626，其他任何新增加的收入需要缴纳的税率是43.41%。<ul><li>个人收入不单单是工资收入，还包含银行利息、理财收益、房屋出租等。</li></ul></li><li>可以在 <a href="https://www.ey.com/ca/en/services/tax/tax-calculators-2019-personal-tax">2019 Personal tax calculator</a> 查询不同收入的交税比例。</li></ul><h2 id="免税储蓄账户（TFSA）"><a href="#免税储蓄账户（TFSA）" class="headerlink" title="免税储蓄账户（TFSA）"></a>免税储蓄账户（TFSA）</h2><ul><li>加拿大每年会给每个人提供5000-6000的免税额度。每个人可以把自己的钱存到TSFA账号里做理财，盈利不用交税。具体额度需要到加拿大政府官网 <a href="https://www.canada.ca/en/revenue-agency.html">CRA(Canada Revenue Agency)</a> 登陆后查询。</li><li>我们是去年（2018年）来加国的，所以每人有11500的免税额度。（2018年是5500，2019年是6000）</li><li>银行和其他金融机构都可开设TSFA账户，随便在哪儿开都行，也可以开多个，但注意总额不超过自己的免税额度，超过会被罚款。</li><li>在哪儿开设TSFA账户，主要是考虑需要购买什么理财产品，管理费和交易费（MER）等</li></ul><h2 id="注册退休金计划（RRSP）"><a href="#注册退休金计划（RRSP）" class="headerlink" title="注册退休金计划（RRSP）"></a>注册退休金计划（RRSP）</h2><ul><li>这个计划的意思是年轻的时候存钱理财，退休了可以从这个账户里取钱花。注意，RRSP不是养老金计划（CPP），也不是政府发的福利。钱是你自己的，政府只是政策鼓励你做退休计划。</li><li>每年报税的时候，政府会计算每个人收入，给每个人分配相应的RRSP储蓄上限额度（全年收入18%）。比如你当年收入是10W，那么来年你可以向自己的RRSP账户存1.8W。每个人可以根据自己的情况在金融机构开设RRSP账号存不超过相应额度的钱用于理财。同TFSA账户一样，超存会罚款。</li><li>优势是什么呢？避税。不同于TFSA支配税后收入，RRSP支配的是税前收入。怎么理解呢？比如，你当年税前收入10W，但是你当年存了1W到RRSP账户中，那么政府就会按9W收入来扣税，那1W不算收入。但是当年政府是不知道你存了多少钱到RRSP账户的，所以要等到来年报税季，你报告给政府，它再把多收税款返还。<ul><li>我们来计算下：以安大略省为例，10W年薪的平均税率是24.63%&#x3D;24,626，9W年薪的平均税率是22.73%&#x3D;20,461。然后你存了1W到RRSP账户。那么来年政府应该返还你24,626-20,461&#x3D;4165。</li><li>当然，怎么可能全是好处呢。从RRSP账户里取钱是算当年收入的。比如你年薪9W，然后你当年又从RRSP账户取了1W，那么你的平均税率，边际税率就会按照9W+1W&#x3D;10W来算。所以存到RRSP里的钱，要在合适的时候取用。最好是不挣钱的时候，比如退休的时候。你没收入了，然后每年取3W，那么政府就按你3W收入计税。超低。</li><li>所以这个账户叫做退休金计划，也就是说，只有在你收入低或者没收入的时候去取这部分钱才最划算。或者，回国工作了。收入一下子降下来了，也可以慢慢取。</li></ul></li><li>同样跟TFSA一样，RRSP也是随便你在哪儿开，怎么理财都是你自己说了算。</li><li>RRSP还有一种特别的账户，就是雇主合作的金融机构开设的，叫做”雇主注册退休金计划”(瞎翻译的)。这种账户可以通过每月发放工资的时候直接帮你存放定额比例到你的RRSP账户中去，然后剩余部分再计算税款。也就是说，政府会直接按照扣除RRSP存款部分后再计税。但是这种账户的弊端是管理费相对较贵，而且不是所有雇主都提供。</li><li>RRSP还有另外两个优势：助学贷款和购房贷款。<ul><li>比方说，你的RRSP账户总额（你可以在不同的机构开设多个RRSP账户）有10W，当你需要买房的时候，你可以向政府申请10W等额免息贷款。购房15年&#x2F;助学10年还清。</li></ul></li></ul><h2 id="理财的渠道"><a href="#理财的渠道" class="headerlink" title="理财的渠道"></a>理财的渠道</h2><ul><li>同事给推荐了<a href="https://wealthsimple.com/">WealthSimple</a> 和 <a href="https://www.questrade.com/home">Questrade</a> 两个平台<ul><li>WealthSimple 是自动托管平台，注册后会让你完整问卷调查，之后给你推荐适合的理财方式，你只需要往里边存钱就可以了。这是我的邀请链接：<a href="https://wealthsimple.com/invite/OBEKGW">https://wealthsimple.com/invite/OBEKGW</a>，通过邀请注册的新账户有1W免托管费额度。邀请者也会增加1W的免托管额度。</li><li>Questrade 是有两种模式，一种是类似WealthSimple的自动托管模式，叫做 Questwealth。另一种是国人熟知的自己管理，叫做Self-directed。在self-directed下开设的账户包括RRSP、TFSA等都是自己去购买和售出理财产品的。</li><li>当然还有各家银行，网上看到很多人推荐TD家，没了解过，就不多说了。</li></ul></li><li>我在网上也搜到了这一篇文章讲投资组合的，有兴趣的可以看看：<a href="https://canadiancouchpotato.com/model-portfolios/">https://canadiancouchpotato.com/model-portfolios/</a> </li><li>另外 reddit 也有一个channel叫做：<a href="https://www.reddit.com/r/PersonalFinanceCanada">#PersonalFinanceCanada</a>, 也可多关注下。</li></ul><h2 id="如何合理避税"><a href="#如何合理避税" class="headerlink" title="如何合理避税"></a>如何合理避税</h2><ul><li>如果是刚开始工作第一年，基本上只有5000-6000的TFSA免税额度。所以没啥可做的。</li><li>第二年开始就可以开始利用RRSP的额度，尽量多的往里存。当然，前提是没有大额开销，且有多余的钱。读书和买房是可以利用RRSP的免息额度贷款，比自己花钱买房和读书要划算的多，但是额度不一定够，所以这两项要仔细研究很多细节，比如大概几年后会买房，预留多少首付，多少额度的贷款等等。另外，在加拿大待得越久，信用越好，买车的商业贷款税率也是可以是极低的。<ul><li>具体优先级：<ul><li>如果是夫妻两人，那么先存满高收入一方的RRSP，优先降低边际税率高的一方的税。然后存低收入一方的RRSP，接着是双方的TFSA账户。如果还有结余，把钱转到收入低的一方的理财账户进行理财，因为低收入方的边际税率相对较低，收益部分缴纳的税款也相对较少。</li><li>单身的话，RRSP优先，然后TFSA，最后再用其他账户理财。</li></ul></li></ul></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>不管是RRSP还是TFSA都是可以称作理财账户，公民可以用来买理财产品或定期存款等用途。加拿大政府还提供了其他账户类型，但目前我只了解了这两个较常用的。</li><li>还有一点需要知道的是，所有政府主导的项目，RRSP、TFSA或者其他的计划账户都是受政府监管的，如果你开设RRSP账户的那家公司倒闭了，不用担心你的钱没了。那些计划的钱都在一个池子里。公司没了，你只需要把钱转移到另一家公司管理就好了。在一家公司开设账户，只是让他们帮忙管理，并不是给他们了。</li></ul>]]></content>
    
    
    <summary type="html">如何理解加拿大个税以及注册退休金计划（RRSP）和免税储蓄账户（TFSA）</summary>
    
    
    
    <category term="生活随想" scheme="https://ericyy.me/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="加拿大税务" scheme="https://ericyy.me/tags/%E5%8A%A0%E6%8B%BF%E5%A4%A7%E7%A8%8E%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>《禅学入门》 林木大拙 读书笔记</title>
    <link href="https://ericyy.me/2017-09-12-chan-xue-ru-men-lin-mu-da-zhuo.html"/>
    <id>https://ericyy.me/2017-09-12-chan-xue-ru-men-lin-mu-da-zhuo.html</id>
    <published>2017-09-12T04:00:00.000Z</published>
    <updated>2022-02-12T20:53:10.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><ul><li>所谓原始佛教，是一粒种子，从这粒种子注定要生出将进一步生长的东方佛教。</li><li>在中国、日本发展的佛教诸派中，有一个特殊的僧人集团，它主张直接从佛教创始人那里接受佛教的精髓和精神。它不依靠任何秘密文字，也没有任何神秘仪式，在佛教诸派中占据了最显赫的地位。这不仅是由于它在历史上的重要性，而且由于它是最具独创性的。它倡导的方法是激励人心的。在学术上称它为佛心宗，通常称为禅（梵语 dhyāna）。</li><li>禅最大限度地强调了个人经验是必不可少的。没有这种经验，任何深远的能力即使是有用的，也不能有效地被掌握。</li><li>佛教徒不承认超自然的作用。禅的精神训练方法是实际的、系统的。</li><li>神秘主义性质是拒绝逻辑剖析，而逻辑性又是西方思想最为显著的特征之一。东方的推理方法是综合的，与其对每个事物一一分析，宁愿在直觉中把握它的全体。</li><li>佛教精神为了实际的人生修行，舍弃了高高在上的哲学上层结构，其结果就不能不变成禅。</li></ul><h2 id="禅是什么？"><a href="#禅是什么？" class="headerlink" title="禅是什么？"></a>禅是什么？</h2><ul><li>禅是人的精神，信奉人的内在的纯洁与善。</li><li>禅把依靠洞察达到心的本性，发现心本身，和以自心为主，作为目的。达到此心或精神的真性是禅宗的根本目的。<ul><li>个人注记：有点像王阳明知行合一的最高境界</li></ul></li><li>禅强调不受任何拘束，脱离一切非自然的妨害。</li><li>禅的基本思想是与我们心内的活动接触，它不依靠任何外部的附加物，尽可能选择最直接的道路。</li><li>由于禅只认识日常生活本身的事实，因此它就能在最平凡、最平稳的普通人的生活中表现出来。</li><li>但向己求 勿从它觅。</li></ul><h2 id="禅是虚无主义吗？"><a href="#禅是虚无主义吗？" class="headerlink" title="禅是虚无主义吗？"></a>禅是虚无主义吗？</h2><ul><li>“所谓中道，无中边亦无二边。外敷色声，偏于一边，内生妄念，又偏于另一边。此两边皆无时，中边亦无，即名中道”</li><li>禅从它的性质上极为自然地主张“此亦非，彼亦非，一切皆非”。 没有否定，没有肯定，只有简明的事实，<strong>纯粹的经验</strong>，以及我们的实在和思想的基础本身。<ul><li>个人注记：纯粹 超越了是非 也超越了虚无的否定一切</li></ul></li><li>在禅中，有某种自我肯定。而且它是自由的，绝对的，不知界限为何物，拒绝抽象的处理方法。</li><li>禅的否定不一定是逻辑意义上的否定，肯定也是如此。禅的理解以经验为第一，不能被思想的人为系统法则，“然”、“否”之类常常牵强附会的认识论公式等等所束缚。</li><li>不除去“彼此”、“我物”、“汝物”这类最后意识，任何人也不能彻底把握禅，并且“不能见古人来”。</li><li>禅的目标是在个人的日常生活现实中，实现超越是非矛盾的统一。</li></ul><h2 id="非逻辑的禅"><a href="#非逻辑的禅" class="headerlink" title="非逻辑的禅"></a>非逻辑的禅</h2><ul><li>禅对待的是事实，不是逻辑上和语言上的偏颇的、不完全的表现。</li><li>禅经常将心比喻为没有阴翳的明镜。因此跟着禅回到单纯，就要使这明镜经常保持光洁明亮，使来到它面前的东西不依靠任何帮助原原本本地映照在其中。</li><li>禅认为我们是语言和逻辑的过于驯服的奴隶。</li><li>如果我们希望找到知道某物价值的方法，找到通向精神幸福的道路，就只有努力于断然摆脱一切条件，看看我们是否能够找到既能发现健全的世界，又能内省地理解人生的观察点。</li><li>“手拿锄头，但事实却没拿” 人们往往认为，逻辑就是人生，逻辑之外没有人生的意义，人们只能顺从它。而事实是大多数人的人生观，都是破坏“思维法则”的。<ul><li>个人注记：以为自己掌控着逻辑，实则是被其奴役的。所以手里什么都没有</li></ul></li><li>客观世界的逻辑学和伦理学有着认为努力和操作的痕迹，有着自觉地意识，是不纯的。禅厌恶不纯。</li><li>人生是艺术，而且像真正的艺术那样，必须忘却自己。</li><li>禅要求发自内心的生活，要求不受规范束缚，各自创造自己的规范。</li></ul><h2 id="大肯定的禅"><a href="#大肯定的禅" class="headerlink" title="大肯定的禅"></a>大肯定的禅</h2><ul><li>精神不断地呼唤自由，通过达到没有否定与肯定的对立差别的更高的肯定形态，就可以很容易地得到这种自由。禅就在这种更高的肯定中。</li><li>听从我们内在生命的要求，禅提倡任何对立也不能存在的绝对的领域。</li><li>禅师们努力除掉弟子们与生俱来所有的立足点，而代之以完全不是立足点的立足点。</li><li>禅的训练方法是让人一下陷入两难境地。我们必须不运用逻辑，依靠更高迈的心灵，自己找到从这种两难境地中脱身的办法。<ul><li>比如瓶中养鹅的故事</li></ul></li><li>人生是事实，任何说明也不需要，也不能切中肯綮(qìng)。说明就是证明。难道我们活着这件事还需要什么证明吗？活着，仅仅是活着，还不够吗？我们在活着，在肯定，在这里就是纯粹的禅，赤裸裸的禅。</li><li>模仿就是奴隶，不要被文字所束缚，必须抓住的是精神。大肯定就活在精神中。然而，精神在何处？这就必须向每日的经验中寻求。在哪里，有我们需要的充足的证据。</li></ul><h2 id="实际的禅"><a href="#实际的禅" class="headerlink" title="实际的禅"></a>实际的禅</h2><ul><li>“平常心是道” 自己有着沉稳自信的存在，就是禅的真理。</li><li>禅的要旨在于捕捉流动的生命。</li><li>理解禅要避免抽象、表现和华丽的辞藻。</li><li>禅籍中有很多古怪的对“如何是禅”的回答，看似不沾边。然而重要的是，要领会禅，必须深入参透禅师们的内心状态。比如“看，水出高源”，“莫言语”，“此处四面皆山”等 皆为自然的描述，没有高深的意思在里边。<ul><li>个人注记：我的理解是生活的每个细微之处都有意识的到往，不可以追求，也不刻意忽视，以平常心视之既是禅。<ul><li>超越是非、对错？</li></ul></li></ul></li><li>禅是自然的，是不能人为制造的，是生命本身的表现，并且是创造性的，这些都是禅的本质特征。因此要抓住禅的真正核心，就要时常注意不为表面的标志所迷惑。</li><li>“心无形相，非离言语，非不离言语。心常湛然，应用自在。”</li><li>禅并非是泛神论，并没有把山川草木看做泛神的表象</li><li>禅也不是自然主义或自由主义<ul><li>自然主义听从人的自然倾向，不追究它的起源和价值，是一种盲从。</li></ul></li></ul><h2 id="悟"><a href="#悟" class="headerlink" title="悟"></a>悟</h2><ul><li>禅修行的目的在于获得观察事物的新见解。</li><li>禅的生活是从这种获得新见解的“悟”开始的。</li><li>悟，可以定义为与知或逻辑的理解相对的直觉的洞察。</li><li>当人的心在悟中成熟起来时，它们在各处自行降临。</li><li>悟的所有原因、条件在内心，只等待着成熟的时机。一旦内心做好准备，世间万物都可使自己直接返回到自己的根源所在，也即是<strong>真我的觉醒</strong>。</li><li>禅与思考无关，悟是一种内在的知觉 —- 但不是对某个单一物的知觉，而是对存在的根本事实的知觉。悟的最终目的地是其自身，除其自身外任何目的都不存在。</li><li>悟的心的开启研究的几个要点：<ol><li>悟不是由强烈思念而产生的某种假想状态。它是对物的看法获得的新见解。禅的训练是将意识构建的方法论一举扫荡，重新得到心的整体。</li><li>悟指向未曾梦到的真理的崭新意识。它是在知的或者表现的事类多重积累后，忽然产生的一种心的激动或爆发。</li><li>悟是禅存在的理由，没有它，禅就不成其为禅。但悟本身没有方法论。</li><li>禅必须有至今未曾想过的知觉的独立，有从全新的角度观察旧有事物的新意识的觉醒。<ol><li>禅那，一般认为是指向某种固定思想的一种冥想或静思，并非是禅。</li></ol></li><li>禅要求的是绝对自由，连神也要脱离的独立。”应无所住，而生其心“。<ol><li>不同于被神秘主义称为神的东西。因为它有明显的目的物追求，而且得到神时，就要拒绝非神。</li></ol></li><li>禅是健全的心理状态。</li></ol></li></ul><h2 id="公案"><a href="#公案" class="headerlink" title="公案"></a>公案</h2><ul><li>禅的独到之处在于公案和坐禅的存在。</li><li>坐禅，梵语的禅那，是佛教训练中的三学，即尸罗（戒）、禅那（静虑）、般若（智慧）中的一种。佛教善徒用其全部的诚心诚意恪守佛的垂训，通晓将自己放纵的激情完全抑制住的方法，最后则期望得到足以领会高深的佛教哲理的一切复杂逻辑的智慧。</li><li>禅那有“知觉”、“反省”、“凝心”等意义，把精神集中于思想的唯一目的物上。因此，从事禅的修行，是在将外界一切琐事调整为最佳状态时来支配意识，在这种状态中，精神逐渐能够超越于它的烦恼动乱之上。</li><li>禅那是指保持心的安静的一般方法，Samādhi（三昧）用以表示作为禅那修行结果所得的心的状态。</li><li>禅修行的坐禅与一般佛教徒实行的坐禅，在心的目的上是不同的。在禅中，禅那或坐禅是用以达到解明公案的手段，在禅中，禅那本身不是目的。要了解公案，如果没有彻底的坐禅修行，这种深远的精神真理就不能牢牢扎根于禅学徒的心中。</li><li>公案在字面上的意义是指公文或权威法规，是流行于宋代末期的语言。现在指古代禅师的逸话，或是禅师与弟子间的问答，以及禅师提出的命题、提问，禅运用它作为开启人心，达到禅的真理的方法。</li><li>虽然心依靠自身也能长大，但人不能无休止等待，无论对善对恶。为了达到自身的目的，总喜欢干涉。在得大于失的情况下，人们欢迎别人的干涉。把它成为改良或进步。因此在纯粹、自然、本质性的禅中导入公案体系，虽是对禅的冒渎，但在某种意义上也是一种进步。</li><li>禅师们很清楚，禅如果不是产生于人的内在要求，就不是本然纯粹病充满创造活力的，而公案的手段和技术却在相当程度上是人工的产物。但是，在很难并很少能得到真物本身的情况下，既是是类似物，也是天之恩赐。</li><li>现在的学生确实常常接受必要之外、有用之外的帮助。这种软弱教育的缺少，才使过去的禅师们成为具有更为雄大气魄的人物。</li><li>心在收到某种束缚、失去自由、听不到声音的情况下，公案只能被看做受限制并被分割的东西。在心从束缚中被解放出来之前，人是不能在此世安住的。</li><li>赵州：”庭前柏树子“。柏树子永远是柏树子本身，与泛神论或其他的”论“没有任何关系。人们大概会认为，努力通过逻辑的锁链了解其中包含的意义，就可以解开这一难题。然而，禅已远离我们在三千里之外。公案就象在逻辑分析所不能达到的我们心灵的最深处培育起来那样而得以运用。</li><li>公案一般是这段了通向合理性的一切道路。也就是说，当我们几次三番向禅师提出自己的见解（用术语来说叫做”参禅“）时，必须宣告自己的知的摸索已经走入穷途，而这正是禅的研究的真正的出发点。</li><li>为了帮助一般读者理解禅，用简便的语言来说，在我们心中，在相对构造的意识的”域外“，存在着未知的秘密。将它成为潜意识或超意识，是不妥的。这只是便利之举。事实上，”域外“也好，潜意识、超意识等等也好，都不存在。<strong>心是全一，不能将其分割。</strong><ul><li>个人注记： 王阳明的心外无物也提到了心作为一个整体，不可分割。</li></ul></li><li>耳司听，目司明，这是理所当然的。但得到悟的，却是整体的心，或者应当说是心之深处之心。当然，它只是知觉的一种行为，但它是最高级的知觉。</li><li>曾被想象为横亘于远方的原野，就是我们每日走过的原野。</li><li>禅必须除去一切带有经过、组织、训练色彩的内容，而止于单纯绝对的经验。</li></ul><h2 id="禅堂与僧侣生活"><a href="#禅堂与僧侣生活" class="headerlink" title="禅堂与僧侣生活"></a>禅堂与僧侣生活</h2><ul><li>在禅堂中，通常被认为是男子工作的劳动，特别成为禅僧生活的主要部分。劳动的大部分是手工劳作，主要是扫除、洗濯(zhào)、烧饭、拾柴，或者到远近村落去化缘。</li><li>大多数宗教隐者的苦行，并不是身心一致的活动。他们想的是身体被心所截断，或者心被身体所截断，好像身体是身体、心是心似的，而忘了这种截断仅仅存在于观念中或假说中。禅修行的目的就是不承认这种最基本的区分，时常注意避免只强调身心某一方面的习惯。</li><li>在此世上诱发不幸的最为常见的原因，就是对所有欲的追求。然而，也不能把禁欲主义当做禅僧生活的理想。僧侣生活的中心思想，是要求对被给予的物加以最好的利用。并非表面所看到的，对抑制或超脱教义的鼓吹。</li><li>禅堂生活的基本原则是“依靠行为的生活”。所以禅僧们都是健康地生活着的、使劲干着粗苯工作的普通人。 他们很快活，富于诙谐，并互相帮助。</li><li>禅院的规则极为严厉，是用以打消我们心中固执的傲慢，让我们饮净谦恭杯中的最后一滴酒。</li><li>所谓参禅，就是弟子到师傅那里讲述对于公案的意见，接受师傅的批评检查。</li><li>为了让弟子们达到最深的自我，真正获得禅的知识，禅师们往往诉诸于这种咋看起来不近人情的方法。</li><li>僧侣的生命必须从内至外，于知识完全合一。</li><li><strong>隐德</strong>是指，在对待物时要尽其所能，充分实现物本身的德。依旧是说它意味着，对被给予的所有东西，要充分完全地、经济地加以利用。</li><li>放弃一切索报和自我克制之心，为善而行善。云飘走了，天空还象原来那样晴朗。</li><li>“竹影扫阶尘不动，月穿潭底水无痕。” 不管怎么说，禅归根到底只是个人的内在经验。</li></ul>]]></content>
    
    
    <summary type="html">禅学入门 林木大拙 读书笔记</summary>
    
    
    
    <category term="阅读笔记" scheme="https://ericyy.me/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://ericyy.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>浙江大学公开课：王阳明心学[董平] 笔记</title>
    <link href="https://ericyy.me/2017-09-10-wang-yangming.html"/>
    <id>https://ericyy.me/2017-09-10-wang-yangming.html</id>
    <published>2017-09-10T04:00:00.000Z</published>
    <updated>2022-02-12T20:53:10.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第二课-心即理：阳明心学的逻辑起点"><a href="#第二课-心即理：阳明心学的逻辑起点" class="headerlink" title="第二课 心即理：阳明心学的逻辑起点"></a>第二课 心即理：阳明心学的逻辑起点</h2><ul><li>宋代理学的发生<ul><li>陆九渊(象山)提出</li><li>最早可追溯到唐朝韩愈，他提出了道统问题<ul><li>佛教过度繁荣使他感到本土文化忧虑</li><li>提出 焚其书 庐其居 人其人</li></ul></li><li>到了宋朝，北宋五子耗费大量时间研究并领会了佛教和道教的精髓后，对先秦的思想进行了重新构建<ul><li>理学 可以说是对儒家思想的重新构建</li><li>突出了很多原本在儒家思想中不突出的观点<ul><li>比如对人性的探讨</li></ul></li><li>理学 借鉴了一些佛教和道教的思想<ul><li>比如 静坐 -&gt; 打坐</li></ul></li></ul></li><li>南宋(朱熹 乾淳之际)<ul><li>理学 思想基本形成</li></ul></li></ul></li><li>理学的三个基本思想形态<ul><li>朱熹一派 主要来自于程颐的思想<ul><li>理 是思想的最高范畴<ul><li>一本之理<ul><li>最根本的是 对理要有终极体认，才能优入圣域</li></ul></li></ul></li><li>理 是可以达到的目的</li></ul></li><li>陆象山<ul><li>心即理<ul><li>圣人之学 心学也</li></ul></li></ul></li><li>浙东学派 吕祖谦 陈亮<ul><li>理 在人类的日常生活当中 在历史中</li><li>把道的追寻贯彻到人类的生活当中</li></ul></li></ul></li><li>朱陆之争<ul><li>他们的争论是对最高实在本身存在性的终极预设发生了歧义</li></ul></li><li>阳明对陆学的基本观点<ul><li>大段也是 只是粗了</li><li>并没有很细致的论述</li></ul></li><li>“心即理”在阳明心学结构中的地位和作用<ul><li>在龙场的艰难困苦生活中 他提出 如果圣人处在这种环境下 圣人会怎么做</li><li><strong>圣人之道 吾性具足</strong> </li><li>思想境界的升华 意味着世界的改变 </li><li>人在社会中生活，行为是受我们的思想和观念主导 观点改变 感觉也就改变了</li><li>龙场悟道最重要一点就是对“心即理”的体悟</li><li>“本心” 心之本体 是我们的意识 我们的精神 主宰身体的视听言动</li><li>让心回到它本身的主宰地位 我们的行为就会按照它原本的样子呈现 我们的境界自然高尚</li><li><strong>心之本体 就是至善</strong></li><li>宇宙的最高真理与我们的本心是纯然一致的 所以人要大其心</li><li>唯有明白了自身的本质和天道原本是一致的 人的本质原本就是天道在人这个层面的实在状态 这叫做本质上的天人合一</li><li>要成为圣人 最重要的是开显本心 使我们的原本与最高之理相符合的本心 以它原本的样子显现出来 一旦达到那个境界 既是人道和天道的最高实现</li><li>所以要<strong>去私欲 心明既是理明</strong> 既是道明 如镜子般 如实地去反映事物 那就是圣人事业的现实开括</li></ul></li><li>总结<ul><li>本质上 人的本质和天道的本质是同一的 这就为人道(人的现实生活)转进于圣人境界造成了理论前提</li></ul></li></ul><h2 id="第三课-知行合一：阳明心学的实践品格"><a href="#第三课-知行合一：阳明心学的实践品格" class="headerlink" title="第三课 知行合一：阳明心学的实践品格"></a>第三课 知行合一：阳明心学的实践品格</h2><ul><li>“知” 、“行” 关系问题<ul><li>《尚书·说命》：知之非艰 行之惟艰</li><li>孔子《论语》：<ul><li>学而时习之不亦乐乎</li><li>不知而行之者 吾无是业： 知是重要行的重要前提</li><li>吾欲托之空言 不如见之行事之深切著明也：实践才是把只是呈现出来 转换价值的根本途径</li></ul></li><li>《大学》：<ul><li>未有学养子而后嫁者也： 亲子之爱是天生的 对子女的慈爱是自然流露的</li></ul></li><li>佛教 天台宗：<ul><li>止观双修 定慧均等修止观</li><li>四明知礼（北宋）：智为行本则行借智生 行能成智则智借行成</li></ul></li><li>朱熹：<ul><li>知行长相须（依附） 强调知与行的并列关系</li><li>知之俞明则行之俞笃 行之俞笃则知之俞明</li></ul></li><li>吕祖谦：<ul><li>致知力行不是两截</li><li>禅宗：磨镜所以明镜</li></ul></li></ul></li><li>“知行合一”的思想渊源<ul><li>朱熹：真知必能行</li><li>王阳明：真知既是行：合二为一</li></ul></li><li>“知行合一”的具体观点（知就是行 行就是知）<ul><li>两个层面<ul><li>知识层面<ul><li>在事物当中获得知识</li><li>如何了解？<ul><li>比如 孝敬父母。知道如何做 然后做是获得知识的过程 也是表达知识的过程</li><li><strong>知和行是同一个完整的过程</strong><ul><li>知是行的起点 行是知的完成</li><li>知识的最后形态 是生活的实践</li></ul></li><li>（个人注记：突然想到业内的 talk is cheap, show me the code)<ul><li>比如数学是机器学习的基础 但实践要在学理论的同时进行 而不是数学学完后就行</li></ul></li></ul></li><li>一念发动处便既是行了<ul><li>意识的流动本身就是行</li></ul></li></ul></li><li>良知学说层面<ul><li>王阳明经常从 知-&gt;良知 的层面上讲</li><li>良知的自知 自己对自己的领悟</li><li>表达自知 通过行来表达</li></ul></li></ul></li><li><strong>知之真切笃实处既是行 行之明觉精察处既是知 知行功夫本不可离</strong><ul><li>当对知的了解层度达到真切笃实处便是行 把知作为一个过程</li><li>当行为达到明觉精察 一定是真实只是的直接表达</li></ul></li></ul></li><li>对所谓明阳“以知代行”说的批评<ul><li>王阳明强调知识的过程必定是通过一个实践的过程体现的</li><li>最终的实践才是知识价值获得实现的最后境界</li></ul></li></ul><h2 id="第四课-格物致知：知识论域的实践转向"><a href="#第四课-格物致知：知识论域的实践转向" class="headerlink" title="第四课 格物致知：知识论域的实践转向"></a>第四课 格物致知：知识论域的实践转向</h2><ul><li>“格物致知”问题的来源<ul><li>来源于《大学》<ul><li>三纲：大学之道 在明明德 在亲民 在止于至善</li><li>八条目： 格物 致知 诚意 正心 修身 齐家 治国 平天下</li><li>起点是：格物 致知</li></ul></li></ul></li><li>朱熹对“格物致知”的理解<ul><li>接着二程夫子来讲<ul><li>天下任何事物，宏观地看，有天理在 最高的一本之道</li><li>任何事物有它的独特之理 分殊之理</li><li>分殊之理是从一本之理中获得</li><li>一本之理作为大一是完满的 分殊之理为小一也是完满的</li><li>分殊之理的不断地“格”、还原 达到一定状态 才可能获得一本之理把握的前提</li></ul></li><li>强调 格物致知是还原具体事物之理 既物而穷理</li><li>格物是致知的前提</li><li>理存在于具体事务当中</li></ul></li><li>王阳明的“格物致知”之说<ul><li>如果理在事物当中 那与我的诚意正心有何关系？</li><li>物着事也 格者正也<ul><li>格君心之非 -&gt; 正君心之非</li><li>“物” 作为一个独立的个体存在</li><li>“事” 体现了一个过程 与我这个主题相关</li></ul></li><li>事物之理不在事物本身 在心中</li><li>强调 我作为实践的主题 如何在事物当中正其心<ul><li>“正” 标准， 是否合乎本心<ul><li>合乎本心 既是 合乎正理</li></ul></li></ul></li><li>强调 格物和致知是统一的整体</li><li>致知： 致良知<ul><li>格物既是正心</li><li>格物致知：致吾心之良知于事事物物 事事物物各得齐正</li></ul></li><li>意之所在便是物 意在于事亲则事亲为一物</li></ul></li></ul><h2 id="第五课-本体与主体性的自我建立"><a href="#第五课-本体与主体性的自我建立" class="headerlink" title="第五课 本体与主体性的自我建立"></a>第五课 本体与主体性的自我建立</h2><ul><li>孟子的“良知良能”<ul><li>人不学而能谓之良能 不学而知着谓之良知<ul><li>凡人皆有恻隐、羞恶、是非、辞让之心 是不学而知的 是我原本就固有的</li><li>恻隐之心 作为人之端 在人本身存在着固有性</li></ul></li></ul></li><li>张载对“德性”、“闻见”之知的区别<ul><li>德性之知不源于见闻 <ul><li>德行：天德良知 超经验的</li><li>但是德性之知是要通过经验表达的</li></ul></li></ul></li><li>王阳明的“良知”说<ul><li>正德十五年 平定朱宸濠之后结合自己的生活经验提出</li><li>与前两位不近相同</li><li>良知： 心之本体（存在本体、德行本体、理性本体）<ul><li>是生活中经验知识活动之所以可能的根据</li><li>是知识本身的本体 是理性的根据</li><li>原本就能知是非 是心体自然</li><li>原本就是至善 知善恶的 是德行之本</li><li>天命之所谓性</li></ul></li><li>正是因为良知的存在 我们才具备存在和德行的本质，以及获得和展现知识的能力</li><li>心的良知是人作为主体的本质依据<ul><li>唯有实现了自我建立的人才能称为主体</li><li>通过个体内在的自觉 在自我中建立起来</li></ul></li><li>良知是为人之本</li><li>人的存在的本质 就是他的德行本质<ul><li>生活中 人是如何表达自己？ <ul><li>道德实践才能彰显个体的存在</li></ul></li><li>道德的内在自觉<ul><li>因为合乎本性的 所以才去做</li></ul></li></ul></li><li>每个个体存在性的表达 是要通过自觉的道德的建立来实现的<ul><li>如此 个体的存在 才不仅仅是自然本身状态的 同时是合乎天道的</li></ul></li></ul></li><li>存在本体、德行本体、理性本体<ul><li>理性本源 是一切只是活动之所以可能的根据 是经验生活中是非判断的根据<ul><li>是非 不仅仅是对错之分 还有善恶之分</li><li>泯灭良知 是指 良知没有获得表达和体现 在表现的层面上讲 泯灭良知</li></ul></li><li>德行本源 是道德所以存在的依据</li><li>存在本源 是人的存在本质和最高的天道本质实现同一 并且这种同一性是作为本源的</li></ul></li></ul><h2 id="第六课-本心的自我开显与自我表达"><a href="#第六课-本心的自我开显与自我表达" class="headerlink" title="第六课 本心的自我开显与自我表达"></a>第六课 本心的自我开显与自我表达</h2><ul><li>致良知的现实必要性 阳明对生命现状的忧虑<ul><li>人们在利益的追逐当中丧失自我 遮蔽了自我的良知 所以要致良知</li><li>孟子： 求放心 放逸之心</li><li>安身立命的基础</li><li>对与人道相违背的生活现象的反思和批评</li></ul></li><li>致良知的双向展开<ul><li>良知的“自知”、“自明”<ul><li>呼唤自己的良知 良知才会以原本的状态出现</li><li><strong>反思</strong> 对自我在生活中的观点、意识、行为进行思索、内省</li><li>只有经过自我反思 我们的<strong>主体性才得以建立</strong></li><li>用王阳明的话来讲 合乎良知叫”诚意“ 也既是”正心“</li><li>”自知“、”自明“ 才能表达自我的主体性建立 必须通过自我实现</li><li>如何对经验现象的实行确切无误的判断<ul><li>有境才有心动 心动才会有善恶是非</li><li>动念之际去为善去恶</li></ul></li></ul></li><li>“致吾心之良知于事事物物”<ul><li>良知的自我展开 在事物的处理过程表现出来</li><li>明明德于天下</li><li>任何事物都应该在良知下进行 物得其正 我们存在性的自我表达</li><li>身 心 意 知 物 融为一体</li><li>人只有实践才能把主体的内在世界和客观世界连在一起</li></ul></li></ul></li><li>致良知于个体意义世界的宏观构建<ul><li>对于物质的欲望 本能的具有扩张性 它具有向恶的转化的可能 欲本身即是越界</li><li>孔子讲以礼来节制自我的情感<ul><li>这种节制在道德上是好的 更符合公共生活</li><li>良知的恰当表达是具有公共性的</li></ul></li><li>在自我与他人的事物观察中 人们更多的是用私欲的权衡 而非对他人客观 对自己混沌<ul><li>良知首先是在自我中呈现 随之才能对其他事物有正确的理解</li></ul></li></ul></li></ul><h2 id="第七课-心外无物：生命境界的无限圆融"><a href="#第七课-心外无物：生命境界的无限圆融" class="headerlink" title="第七课 心外无物：生命境界的无限圆融"></a>第七课 心外无物：生命境界的无限圆融</h2><ul><li>“心”与“物”的关系<ul><li>“物”是“事”，“事”是介入了主体活动过程的</li><li>事物的两种存在状态： **“寂”与“显”</li></ul></li></ul><p>**<br>        * 山中之花自开自落 没看到花的时候 你和花同归于“寂”，当你看到时是“显”<br>        * <strong>“寂“并非无，而是事物存在的一种状态</strong><br>            * 是王阳明确认的事物的客观存在性<br>        * <strong>”显“ 当你看到花时 在你心中 一时分明起来</strong><br>            * <strong>看到 是”寂“到”显“的转换</strong><br>    * 心的本体的存在 原本是”寂“、是不动的，但却包含着向”显“转换的无限可能，反之亦然 这叫做”寂感神应“ 没前后之分<br>    * 看到花时 它由静转化为动，成为主题的对象，关系情景构成<br>        * 体用一源 现为无间 无前无后无中间<br>        * 任何事物的客观存在状态 只有在特定的情景中 客观物才以它原本的样式显现<br>    * 任何客观物 当它以一种纯粹的客观存在时 包含”寂“和”显“两种状态 只不过呈现给主题的状态不同<br>    * <strong>王阳明的讨论并不涉及 事物是否可以脱离人的主观意识而存在 也就是并不涉及唯心主义讨论的问题</strong></p><ul><li>“心外无物”作为一种生命境界<ul><li>心不在焉 -&gt; 听而不闻 视而不见 食而不知其味</li><li>“关心”<ul><li>一个事物在成为我的对象之前 它的存在跟我是不“关心”的 它的存在对我是无意义的</li><li>王阳明讲的一个真正的仁人是与天下事相关心的 是把世界万物容纳到个人的主体当中</li></ul></li><li>致良知 通过主体的生活、道德实践 尽可能扩展我们的心灵世界 使一切万物都能够到达、进入的我的主体世界 如此我的心便是和天下万物相关 最后的圆融境界叫“无心外之物”</li><li>做不到 可以<strong>心向往之</strong></li><li>“心外无物” 是仁人的境界<ul><li>把“物”作为个人主体的一部分</li></ul></li></ul></li><li>“心外无物”与主题价值世界的构建<ul><li>个人主体世界的构建完全取决于我们主体自我的实践及其方式</li><li>个人要尽可能扩充、表达我们的良知 努力进行生活实践 并将实践纳入个人的主体世界<ul><li>我们的意义世界 便是在实践当中不断的建立和扩张<ul><li>主体的世界和客观世界不断的链接起来后 个人的主体世界也越来越宏达</li></ul></li></ul></li><li>“心外无物”是生命的最高境界，是人生自我价值不断扩展和实现</li></ul></li><li>（个人注记：你的主体世界便是你人生的价值。想到了精致的利己主义。利己没有什么错误，但致良知能够极大的丰富我们的主体世界，无论是从哪个角度的丰富，都会让其更加丰富多彩。即便我们的人生价值是丰富自己的体验或者收获更多的物质，那么致良知也是对其有很大的帮助的。比如丰富了对看待事物的视角，体验自然也就丰富了。如此来讲即便只谈利己也不必排斥“心外无物”。心向往之，实践前行。）</li></ul><h2 id="第八课-天泉证道“四句教”阳明学派的分化"><a href="#第八课-天泉证道“四句教”阳明学派的分化" class="headerlink" title="第八课 天泉证道“四句教”阳明学派的分化"></a>第八课 天泉证道“四句教”阳明学派的分化</h2><ul><li>“天泉证道”的背景 “四句教”问题<ul><li>“四句教” 仅出现在《传习录》下卷和年谱中 未出现在王阳明自己的作品中<ul><li>无善无恶心之本</li><li>有善有恶意之动</li><li>知善知恶是良知</li><li>为善去恶是格物</li></ul></li><li>弟子钱德洪和王畿是在天泉桥向王阳明请教这四句话的意思的 所以叫做“天泉证道”</li></ul></li><li>钱德洪关于“四句教”的理解<ul><li>认为是王门宗旨 是究竟之说</li><li>良知原本是无善无恶的 对圣人如此 但普通人不免有习心在 不免有私欲 所以 意之动就会有善有恶 于是要求我们在一念发动之动给克制住</li><li>是非善恶良知本是知道的 所以要为善去恶</li></ul></li><li>王畿(jī)（龙溪）关于“四句教”的理解<ul><li>认为是权宜之说</li><li>认为<ul><li>无心之心则藏秘</li><li>无意之意则应圆</li><li>无知之知则体寂</li><li>无物之物则用神</li></ul></li><li>认为 心如果是无善无恶的 那么 意、知、物都应该是无善无恶的 不可能突然冒出来有善有恶的意</li></ul></li><li>“四句教”与王学分化的关系<ul><li>“天泉证道”，王阳明认为 人非利根和钝根之人<ul><li>利根之人 聪慧 一点就透<ul><li>一悟本体既是工夫</li><li>便是王畿所讲</li><li>但此般根基之人很少</li></ul></li><li>钝根之人 愚笨 需要慢慢学慢慢习<ul><li>对于普通人还是要讲为善去恶</li><li>钱德洪之说</li></ul></li></ul></li><li>黄宗羲对王钱二人的评价<ul><li>因其二人而风行 也因此二人而渐失其传</li></ul></li></ul></li><li>“四句教”的具体分析<ul><li>无善无恶心之本<ul><li>无善无恶是为至善 </li><li>讲的是本心自身的实在的状态 是未发之中 是无法判断的<ul><li>因为善恶是基于经验世界检验价值的相对判断</li><li>而<strong>至善是超经验的 是绝对的价值原点 由此才能对事物进行判断</strong><ul><li>比如称用于权衡他物 眼睛是无色的才可以分辨颜色 镜子本无一物才能照出来事物本身</li></ul></li></ul></li></ul></li><li>有善有恶意之动<ul><li>意 是心之动的主动状态 是有境，有原因的<ul><li>所以是一种经验状态</li><li>没有对物、境构成关系之前 本体归于本相之寂</li><li>所以它一定会落于某个方面 才有善恶之分</li><li>价值只能在经验的世界当中显现它自己</li></ul></li><li>心之动合理的方面是讲 心之动是合乎本体 是合乎心本来状态的 所以这样的一动 在价值上会落于善的方面</li></ul></li><li>知善知恶是良知<ul><li>良知本身是自知自明 知善知恶的 心体向经验转换时 它是可以判断善恶的</li></ul></li><li>为善去恶是格物<ul><li>当良知判断出事物的善恶之后 人应该朝着善的方向去做</li><li>而这个过程便是 诚意正心</li></ul></li></ul></li></ul><h2 id="第九课-心体的自我澄明与价值实现"><a href="#第九课-心体的自我澄明与价值实现" class="headerlink" title="第九课 心体的自我澄明与价值实现"></a>第九课 心体的自我澄明与价值实现</h2><ul><li>四句教是否存在内在“逻辑”关系<ul><li>不存在内在逻辑关系</li><li>就四个不同层面来讲的</li></ul></li><li>“良知现成”与思相解放<ul><li>王龙溪一派虽偏离了王阳明的思想 但是却带来了思想了解放</li><li>正因为人人都诉诸自己的良知 任何事物在经由良知的审慎之前都是值得怀疑的 所以它要求我们对生活进行审查 我们的价值也在这个过程中建立</li><li>未经理性审查的生活是不值得过的 – 苏格拉底</li><li>但是当我们过度强调良知的审查 就会变成自我的率性而为 陷入以意见为真理的谬误的状态</li></ul></li><li>本体与工夫的关系<ul><li>良知是心之本体 如何显现？ 如何到达？</li><li>工夫 相当于方法论<ul><li>钱德洪：为善去恶既是工夫 在事上磨炼<ul><li>工夫总是相对于本体而言 并且总是相对于本体的开显而言的</li></ul></li><li>王龙溪：工夫是需要的 但不需要为善去恶 不需要在事上磨炼<ul><li>当下悟出无山无恶心之本 即本体工夫</li><li>如果你真正明白这个道理 不需要那么复杂 良知现成</li><li>现成既是本体也是工夫</li><li>良知本顺 致之则逆 不需要致良知</li></ul></li></ul></li><li>王阳明还是非常强调事情的磨炼的</li></ul></li><li>董平老师的观点<ul><li>良知作为价值原点 是超经验的 在生活中的表达是有可能发生问题的</li><li>心之动发为意 是有善有恶的</li><li>生活中充满各种欲望 我们往往容易偏离自我的心灵指导</li><li>所以反思是很重要的</li><li>人需要了解到自我的良知是浩渺的可以容纳世间万物 可以判断世间一切美丑善恶 这样我们才能在天地间堂堂正正的做人</li><li>王阳明遗言：此心光明 亦复何言<ul><li>领会到这点 我们就能对生活稍微超然疏离一点 这样的行为能让我们的精神世界高尚一点</li><li>这种超然和疏离是对欲望的疏离 对利益的看淡 使我们变得高尚</li><li>使我们变得高尚的 不是我们的本能 是我们的德行、良知</li><li>一个懂得致良知的人才会享有崇高的思想境界</li></ul></li><li>客观事物是脱离自我存在的 但只有进入我的世界 才会对我有意义</li></ul></li></ul><h2 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h2><ul><li>心学里的良知和禅学里边讲到的对绝对价值的追求很相似。<ul><li>林木大拙讲到禅是超越逻辑的。相对来讲，心学的良知学也是超经验范畴的，讲的也是绝对价值。</li><li>另一方面，禅讲的平常心也对应的“为善去恶”的观念在里边。</li></ul></li><li>而“知行合一”和禅学也都一直在强调思维的一贯性。</li></ul><h2 id="注记："><a href="#注记：" class="headerlink" title="注记："></a>注记：</h2><ul><li>以上皆为董平老师的观点 由于他提到“这是我个人的观点”的次数太多，我基本全给省略了。所以作为对阳明心学的一个思考角度来看。在今后读过《传习录》、《大学问》等王阳明的著作之后对比来看更有收获。</li><li>课程地址: <a href="http://open.163.com/special/cuvocw/wangyangming.html">http://open.163.com/special/cuvocw/wangyangming.html</a></li></ul>]]></content>
    
    
    <summary type="html">心即理：阳明心学的逻辑起点，知行合一：阳明心学的实践品格 格物致知：知识论域的实践转向 本体与主体性的自我建立 本心的自我开显与自我表达 心外无物：生命境界的无限圆融 天泉证道“四句教”阳明学派的分化 心体的自我澄明与价值实现</summary>
    
    
    
    <category term="阅读笔记" scheme="https://ericyy.me/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://ericyy.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Notes of The School of Life</title>
    <link href="https://ericyy.me/2017-04-30-the-school-of-life.html"/>
    <id>https://ericyy.me/2017-04-30-the-school-of-life.html</id>
    <published>2017-04-30T04:00:00.000Z</published>
    <updated>2022-02-12T20:53:10.506Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在 YouTube 的 The School of Life channel 看到的，记下一些有趣的点。</li></ul><h2 id="Philosophical-Meditation"><a href="#Philosophical-Meditation" class="headerlink" title="Philosophical Meditation"></a>Philosophical Meditation</h2><ul><li>About twenty minutes every few days.</li><li>First: <ul><li>Accumulate a list of concerns you haven’t looked at head on, but have glimpsed in the course of the day.</li></ul></li><li>Three questions:<ul><li>what am i currently anxious about? all the detailed.</li><li>what am i upset about and whom? like talk to a patient friend.<ul><li>what other explanations might there be for the hurt they have caused?</li><li>if this has happened to a friend, how would you advise him?</li></ul></li><li>what am i currently excited and ambitious about?<ul><li>what would it be to change your life in the light like this?</li><li>what might be missing in your life?</li><li>if this thing could change your life, what changes might it advise?</li><li>if other parts of your life were more like this, what might they be like?</li></ul></li></ul></li><li>Philosophical Meditation helps us by creating an occasion where we can identify our thoughts, and get them in some kind of order, and to know ourself properly.</li></ul><h2 id="How-to-be-Confident"><a href="#How-to-be-Confident" class="headerlink" title="How to be Confident"></a>How to be Confident</h2><ul><li>Take yourself as a fool, and start to make mistakes</li></ul><h2 id="Self-Esteem"><a href="#Self-Esteem" class="headerlink" title="Self-Esteem"></a>Self-Esteem</h2><ul><li>The result of understanding our past and the dynamic shame, conditionality and humiliation that might lie there. </li><li>High-Esteem seems largely to be prize of psychology rather than the fruit of anything we might achieve out of the world in relation the economy.</li></ul>]]></content>
    
    
    <summary type="html">在 YouTube 的 The School of Life channel 看到的，记下一些有趣的点。</summary>
    
    
    
    <category term="生活随想" scheme="https://ericyy.me/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="The School of Life" scheme="https://ericyy.me/tags/The-School-of-Life/"/>
    
  </entry>
  
  <entry>
    <title>排列组合算法[Python]</title>
    <link href="https://ericyy.me/2017-03-11-powerset-algorithms.html"/>
    <id>https://ericyy.me/2017-03-11-powerset-algorithms.html</id>
    <published>2017-03-11T05:00:00.000Z</published>
    <updated>2023-03-22T03:14:07.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="两种排列组合算法"><a href="#两种排列组合算法" class="headerlink" title="两种排列组合算法"></a>两种排列组合算法</h1><ul><li>一个是在Edx课上看到的，一个是Python的源码</li></ul><h2 id="通过二进制中“1”所在位置的可能性来确定数组中的索引位置，进而求得所有排列组合"><a href="#通过二进制中“1”所在位置的可能性来确定数组中的索引位置，进而求得所有排列组合" class="headerlink" title="通过二进制中“1”所在位置的可能性来确定数组中的索引位置，进而求得所有排列组合"></a>通过二进制中“1”所在位置的可能性来确定数组中的索引位置，进而求得所有排列组合</h2><ul><li>首先确定组合的数量是2的N次方个，然后循环2^N， 每个数字即代表一种可能。<ul><li>比如数组长度是5的情况下，我们一共有2^5种可能，第 1 种可能 对应的二进制为 <code>0 0 0 0 1</code>，第 5 种 对应的是 <code>0 1 0 0 1</code>.</li></ul></li><li>其次既是如何把对应位置的二进制转化成对应数组的索引位置，比如上例中 第 5 种可能 即为 5 转换的二进制：<code>0 1 0 0 1</code>，那么它对应的数据应该是数组种的 第二位和最后一位<ul><li>算法中，通过 <code>(i &gt;&gt; j) % 2 == 1</code> 来确定 当前二进制位是否为 1，在此就不赘述了。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">powerSet</span>(<span class="params">items</span>):</span><br><span class="line">    N = <span class="built_in">len</span>(items)</span><br><span class="line">    <span class="comment"># enumerate the 2**N possible combinations</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**N):</span><br><span class="line">        combo = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">            <span class="comment"># test bit jth of integer i</span></span><br><span class="line">            <span class="comment"># test bit jth of integer i</span></span><br><span class="line">            <span class="comment"># &gt;&gt;j. move the bit we want to check to the end</span></span><br><span class="line">            <span class="comment"># %2. remove all the other bits execpt the last one</span></span><br><span class="line">            <span class="comment"># check the one we kept if it is 1 not 0,</span></span><br><span class="line">            <span class="comment"># which means we want to keep the item which on the position</span></span><br><span class="line">            <span class="comment"># example:  0 1 1 0 1</span></span><br><span class="line">            <span class="comment"># we want to check the third &quot;1&quot;</span></span><br><span class="line">            <span class="comment"># first move the second bit to the end(&gt;&gt;j), will be &quot;0 0 0 1 1&quot;</span></span><br><span class="line">            <span class="comment"># then remove all the other bits(%2), we got &quot;0 0 0 0 1&quot;</span></span><br><span class="line">            <span class="comment"># compare it with 1, which is true, </span></span><br><span class="line">            <span class="comment"># so we take the item with the position, which will be item[2]</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;&gt; j) % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                combo.append(items[j])</span><br><span class="line">        <span class="keyword">yield</span> combo</span><br></pre></td></tr></table></figure><h2 id="使用python官方文档提供的combinations"><a href="#使用python官方文档提供的combinations" class="headerlink" title="使用python官方文档提供的combinations:"></a>使用python官方文档提供的<code>combinations</code>:</h2><ul><li>为了更好的理解这个算法，我把它单独拿了出来，并没有导入</li><li>同上一个算法，这个也是遍历找得所有的索引，然后取出数组中对应的数据</li><li>之前很努力的写了英文 不想翻译了，勉强看啦</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">powerset_generator</span>(<span class="params">sets</span>):</span><br><span class="line">    <span class="keyword">for</span> subset <span class="keyword">in</span> chain.from_iterable(combinations(sets, r) <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sets)+<span class="number">1</span>)):</span><br><span class="line">        <span class="keyword">yield</span> subset</span><br><span class="line">        </span><br><span class="line"><span class="comment"># the logic of this function is </span></span><br><span class="line"><span class="comment">#   set a new array with length r</span></span><br><span class="line"><span class="comment">#   loop the last element&#x27;s index from i to i+n-r(n is the length of pool, r is the length of subsequence). </span></span><br><span class="line"><span class="comment">#   when hit the maximum which should be n-1, increase the last-1 element&#x27;s index.</span></span><br><span class="line"><span class="comment">#   loop until the first element&#x27;s index hit the maximum, </span></span><br><span class="line"><span class="comment">#   then increase the previous index, and set the last index to previous index + 1, </span></span><br><span class="line"><span class="comment">#   then back to the loop until all of the indices hit the maximum</span></span><br><span class="line"><span class="comment"># For example: iterable = [1,2,3,4,5], r = 3</span></span><br><span class="line"><span class="comment">#   (1, 2, 3)</span></span><br><span class="line"><span class="comment">#   (1, 2, 4)</span></span><br><span class="line"><span class="comment">#   (1, 2, 5) &lt;-- the last index hit the maximum</span></span><br><span class="line"><span class="comment">#   (1, 3, 4) &lt;-- increase the previous index, and set every one after to previous index + 1,</span></span><br><span class="line"><span class="comment">#   (1, 3, 5) </span></span><br><span class="line"><span class="comment">#   (1, 4, 5) &lt;-- the (last-1) index hit the maximum</span></span><br><span class="line"><span class="comment">#   (2, 3, 4)</span></span><br><span class="line"><span class="comment">#   (2, 3, 5)</span></span><br><span class="line"><span class="comment">#   (2, 4, 5)</span></span><br><span class="line"><span class="comment">#   (3, 4, 5) &lt;-- the (last-2) index hit the maximum</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">combinations</span>(<span class="params">iterable, r</span>):</span><br><span class="line">    </span><br><span class="line">    pool = <span class="built_in">tuple</span>(iterable)</span><br><span class="line">    </span><br><span class="line">    n = <span class="built_in">len</span>(pool)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> r &gt; n:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = <span class="built_in">list</span>(<span class="built_in">range</span>(r))</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># In the &quot;while&quot; circle, we will start to change the indices by adding 1 consistently.</span></span><br><span class="line">    <span class="comment"># So yield the first permutation before the while start.</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="built_in">tuple</span>(pool[x] <span class="keyword">for</span> x <span class="keyword">in</span> indices)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># This &#x27;for&#x27; loop is checking whether the index has hit the maximum from the last one to the first one.</span></span><br><span class="line">        <span class="comment"># if it indices[i] &gt;= its maximum, </span></span><br><span class="line">        <span class="comment">#   set i = i-1, check the previous one</span></span><br><span class="line">        <span class="comment"># if all of the indices has hit the maximum, </span></span><br><span class="line">        <span class="comment">#   stop the `while` loop</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(r)):</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># let&#x27;s take an example to explain why using i + n - r</span></span><br><span class="line">            <span class="comment"># pool indices: [0,1,2,3,4]</span></span><br><span class="line">            <span class="comment"># subsequence indices: [0,1,2]</span></span><br><span class="line">            <span class="comment"># so</span></span><br><span class="line">            <span class="comment">#   indices[2] can be one of [2,3,4],</span></span><br><span class="line">            <span class="comment">#   indices[1] can be one of [1,2,3],</span></span><br><span class="line">            <span class="comment">#   indices[0] can be one of [0,1,2],</span></span><br><span class="line">            <span class="comment"># and the gap of every index is n-r, like here is 5-3=2</span></span><br><span class="line">            <span class="comment"># then</span></span><br><span class="line">            <span class="comment">#   indices[2] &lt; 2+2 = i+2 = i+n-r,</span></span><br><span class="line">            <span class="comment">#   indices[1] &lt; 1+2 = i+2 = i+n-r,</span></span><br><span class="line">            <span class="comment">#   indices[0] &lt; 0+2 = i+2 = i+n-r,</span></span><br><span class="line">            <span class="keyword">if</span> indices[i] &lt; i + n - r:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># loop finished, return</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Add one for current indices[i], </span></span><br><span class="line">        <span class="comment"># (we already yield the first permutation before the loop)</span></span><br><span class="line">        indices[i] += <span class="number">1</span></span><br><span class="line">        <span class="comment"># this for loop increases every indices which is after indices[i].</span></span><br><span class="line">        <span class="comment"># cause, current index has increased, and we need to confirm every one behind is initialized again.</span></span><br><span class="line">        <span class="comment"># For example: current we got i = 2, indices[i]+1 will be 3, </span></span><br><span class="line">        <span class="comment"># so the next loop should start with [1, 3, 4], not [1, 3, 3]</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, r):</span><br><span class="line">            indices[j] = indices[j-<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">yield</span> <span class="built_in">tuple</span>(pool[x] <span class="keyword">for</span> x <span class="keyword">in</span> indices)  </span><br></pre></td></tr></table></figure><h2 id="源地址"><a href="#源地址" class="headerlink" title="源地址"></a>源地址</h2><ul><li><a href="https://cs.ericyy.me/computational-thinking/lecture-2-powerset.html">https://cs.ericyy.me/computational-thinking/lecture-2-powerset.html</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators">按位操作符（Bitwise operators）from MDN</a></li></ul>]]></content>
    
    
    <summary type="html">最新学到的排列组合算法</summary>
    
    
    
    <category term="编程学习" scheme="https://ericyy.me/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://ericyy.me/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排列组合" scheme="https://ericyy.me/tags/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>部署和测试工具 - PHP进阶 (5)</title>
    <link href="https://ericyy.me/2017-02-26-php-advance-5-development-testing.html"/>
    <id>https://ericyy.me/2017-02-26-php-advance-5-development-testing.html</id>
    <published>2017-02-26T05:00:00.000Z</published>
    <updated>2023-03-22T03:14:07.197Z</updated>
    
    <content type="html"><![CDATA[<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="概念分类"><a href="#概念分类" class="headerlink" title="概念分类"></a>概念分类</h4><ul><li>单元测试(Unit Test) - 在项目中独立测试函数、方法、类等。</li><li>TDD(Test-Driven Development) - 项目开始后，先写一部分测试用例，然后实现，然后继续写测试用例，继续实现，不断循环直至项目完成或终止。</li><li>BDD(Behavior-Driven Development) - 基于行为流程来描述程序的实现。类似于单元测试，只是在实现上应用了比较友好的表达方式便于理解。<ul><li>SpecBDD - 面向开发人员。使用编程语言表达。例： <a href="http://www.phpspec.net/en/stable/">phpspec</a></li><li>StoryBDD - 面向产品经理。基于英语语言表达。例：<a href="http://behat.org/en/latest/">behat</a></li></ul></li></ul><h3 id="自动化部署工具"><a href="#自动化部署工具" class="headerlink" title="自动化部署工具"></a>自动化部署工具</h3><ul><li><a href="https://github.com/capistrano/capistrano">capistrano&#x2F;capistrano</a></li><li><a href="http://magephp.com/">magephp</a></li><li><a href="http://rocketeer.autopergamene.eu/">Rocketeer</a></li></ul><h3 id="代码分析工具"><a href="#代码分析工具" class="headerlink" title="代码分析工具"></a>代码分析工具</h3><ul><li><a href="https://xdebug.org/">Xdebug</a></li><li><a href="https://blackfire.io/">blackfire</a></li></ul>]]></content>
    
    
    <summary type="html">部署和测试工具</summary>
    
    
    
    <category term="编程学习" scheme="https://ericyy.me/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PHP" scheme="https://ericyy.me/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>服务器配置及性能调优 - PHP进阶 (4)</title>
    <link href="https://ericyy.me/2017-02-25-php-advance-4-tuning.html"/>
    <id>https://ericyy.me/2017-02-25-php-advance-4-tuning.html</id>
    <published>2017-02-25T05:00:00.000Z</published>
    <updated>2023-03-22T03:14:07.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP-FPM-配置"><a href="#PHP-FPM-配置" class="headerlink" title="PHP-FPM 配置"></a>PHP-FPM 配置</h3><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><ul><li><code>emergency_restart_threshold = 10</code><ul><li>如果子进程在 <code>emergency_restart_interval</code> 设定的时间内收到该参数设定次数的 <code>SIGSEGV</code> 或者 <code>SIGBUS</code>退出信息号，则<code>FPM</code>会重新启动。0 表示“关闭该功能”。默认值：0（关闭）。</li></ul></li><li><code>emergency_restart_interval = 1m</code><ul><li>用于设定平滑重启的间隔时间。这么做有助于解决加速器中共享内存的使用问题。</li></ul></li></ul><h4 id="进程池配置"><a href="#进程池配置" class="headerlink" title="进程池配置"></a>进程池配置</h4><ul><li><code>pm.max_requests = 1000</code><ul><li>设置每个子进程重生之前服务的请求数。对于可能存在内存泄漏的第三方模块来说是非常有用的。如果设置为 ‘0’ 则一直接受请求，等同于 <code>PHP_FCGI_MAX_REQUESTS</code> 环境变量。默认值：0。</li></ul></li><li><code>request_slowlog_timeout = 5s</code><ul><li>当一个请求该设置的超时时间后，就会将对应的 PHP 调用堆栈信息完整写入到慢日志中。设置为 ‘0’ 表示 ‘Off’。</li></ul></li></ul><h4 id="确定-PHP-FPM-的进程数"><a href="#确定-PHP-FPM-的进程数" class="headerlink" title="确定 PHP-FPM 的进程数"></a>确定 PHP-FPM 的进程数</h4><ul><li>首先确定服务器可以分配给PHP的内存大小</li><li>其次确定单个PHP进程的内存消耗</li><li>最后确定进程数</li><li>上线前别忘了使用 Apache Bench 或者 Seige 来做压力测试</li></ul><h3 id="Zend-OPcache"><a href="#Zend-OPcache" class="headerlink" title="Zend OPcache"></a>Zend OPcache</h3><ul><li>通俗来讲，OPcache 是用来预编译PHP的代码到缓存里来加速HTTP的请求。</li></ul><h3 id="Session-处理"><a href="#Session-处理" class="headerlink" title="Session 处理"></a>Session 处理</h3><ul><li>由于PHP默认会将session以文件的形式存储在磁盘上，必然会加大磁盘的I&#x2F;O，拖慢系统。使用内存存储的方式，比如 Memcached 或者 Redis 会是更好的选择。而且这种方式会便于以后扩展分布式系统时保证 Session 共享。</li></ul>]]></content>
    
    
    <summary type="html">服务器配置及性能调优</summary>
    
    
    
    <category term="编程学习" scheme="https://ericyy.me/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PHP" scheme="https://ericyy.me/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>好的编程习惯 - PHP进阶 (3)</title>
    <link href="https://ericyy.me/2017-02-20-php-advance-3-good-practice.html"/>
    <id>https://ericyy.me/2017-02-20-php-advance-3-good-practice.html</id>
    <published>2017-02-20T05:00:00.000Z</published>
    <updated>2023-03-22T03:14:07.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="净化、验证、转义输入输出"><a href="#净化、验证、转义输入输出" class="headerlink" title="净化、验证、转义输入输出"></a>净化、验证、转义输入输出</h3><h4 id="需要注意的几个外部数据源"><a href="#需要注意的几个外部数据源" class="headerlink" title="需要注意的几个外部数据源"></a>需要注意的几个外部数据源</h4><ul><li>$_GET</li><li>$_POST</li><li>$_REQUEST</li><li>$_COOKIE</li><li>$argv</li><li>php:&#x2F;&#x2F;stdin</li><li>php:&#x2F;&#x2F;input</li><li>file_get_contents()</li><li>远程数据库</li><li>远程 APIs</li><li>远程客户端获取的数据</li></ul><h4 id="净化输入"><a href="#净化输入" class="headerlink" title="净化输入"></a>净化输入</h4><ul><li>HTML <ul><li><p>在接触存储层之前，使用 htmlentities() 来净化 HTML 的特殊字符:</p><pre><code>  &lt;?php $input = &#39;&lt;p&gt;&lt;script&gt;alert(&quot;You won the Nigerian lottery!&quot;);&lt;/script&gt;&lt;/p&gt;&#39;;   echo htmlentities($input, ENT_QUOTES, &#39;UTF-8&#39;);  </code></pre></li><li><p>避免使用 preg_replace(), preg_replace_all() 和 preg_replace_callback() 等正则函数在HTML代码里。</p></li></ul></li><li>SQL 查询<ul><li>使用 PDO prepared statement 的形式，避免SQL注入等问题。</li></ul></li><li>用户信息收集<ul><li><p>使用 filter_var() 和 filter_input() 来净化用户信息数据，如 emails, URL-encoded strings, integers, floats, HTML characters, URLs 等，例：</p><pre><code>  &lt;?php $email = &#39;john@example.com&#39;;   $emailSafe = filter_var($email, FILTER_SANITIZE_EMAIL);</code></pre></li></ul></li></ul><h4 id="验证数据"><a href="#验证数据" class="headerlink" title="验证数据"></a>验证数据</h4><ul><li><p>可以使用内置函数 filter_var() 来做简单的验证：</p><pre><code>  &lt;?php   $input = &#39;john@example.com&#39;;   $isEmail = filter_var($input, FILTER_VALIDATE_EMAIL);   if ($isEmail !== false) &#123;      echo &quot;Success&quot;;   &#125; else &#123;      echo &quot;Fail&quot;;   &#125;  </code></pre></li><li><p>几个推荐的扩展库</p><ul><li><a href="https://packagist.org/packages/aura/filter">aura&#x2F;filter</a></li><li><a href="https://packagist.org/packages/respect/validation">respect&#x2F;validation</a></li><li><a href="https://packagist.org/packages/symfony/validator">symfony&#x2F;validator</a></li></ul></li></ul><h4 id="转义输出"><a href="#转义输出" class="headerlink" title="转义输出"></a>转义输出</h4><ul><li><p>使用 htmlentities() ：</p><pre><code>  &lt;?php   $output = &#39;&lt;p&gt;&lt;script&gt;alert(&quot;NSA backdoor installed&quot;);&lt;/script&gt;&#39;;   echo htmlentities($output, ENT_QUOTES, &#39;UTF-8&#39;);  </code></pre></li><li><p>使用模板引擎，比如：</p><p>  <a href="https://packagist.org/packages/twig/twig">twig&#x2F;twig</a></p></li></ul><h3 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h3><h4 id="几个重要的准则"><a href="#几个重要的准则" class="headerlink" title="几个重要的准则"></a>几个重要的准则</h4><ul><li><p>不要记录用户的密码</p></li><li><p>不要过多限制用户的密码，仅推荐限制长度即可</p></li><li><p>不要通过邮件发送用户密码</p></li><li><p>使用 bcrypt 函数单向加密用户密码，个人推荐 <a href="http://www.openwall.com/phpass/">phpass</a> 第三方扩展</p></li><li><p>用户注册和登录示例</p><ul><li><p>注册时使用 password_hash() 来加密用户密码, 源代码: <a href="https://github.com/codeguy/modern-php/blob/master/05-good-practices/passwords/register.php">codeguy&#x2F;modern-php</a></p></li><li><p>注：CRYPT_BLOWFISH 加密方式的salt的组成依次是：</p><ul><li><p>(“$2a$”, “$2x$” 或者 “$2y$”) + “xx”(04&lt;xx&lt;31) + “$” + “22个字符”(“.&#x2F;0-9A-Za-z”)， </p></li><li><p>例如：”$2a$07$usesomesillystringfor”</p></li><li><p>PHP 5.3.7 之后应使用”$2y$”作为前缀</p><pre><code>  &lt;?php  try &#123;      // Validate email      $email = filter_input(INPUT_POST, &#39;email&#39;, FILTER_VALIDATE_EMAIL);      if (!$email) &#123;          throw new Exception(&#39;Invalid email&#39;);      &#125;            // Validate password      $password = filter_input(INPUT_POST, &#39;password&#39;);      if (!$password || mb_strlen($password) &lt; 8) &#123;          throw new Exception(&#39;Password must contain 8+ characters&#39;);      &#125;            // Create password hash      $passwordHash = password_hash(         $password,         CRYPT_BLOWFISH, // 加密方式         [&#39;cost&#39; =&gt; 12] // 递归次数      );      if ($passwordHash === false) &#123;          throw new Exception(&#39;Password hash failed&#39;);      &#125;            // Create user account (THIS IS PSUEDO-CODE)      // $user = new User();      // $user-&gt;email = $email;      // $user-&gt;password_hash = $passwordHash;      // $user-&gt;save();      // Redirect to login page            header(&#39;HTTP/1.1 302 Redirect&#39;);      header(&#39;Location: /login.php&#39;);  &#125; catch (Exception $e) &#123;      // Report error      header(&#39;HTTP/1.1 400 Bad request&#39;);      echo $e-&gt;getMessage();  &#125;</code></pre></li></ul></li><li><p>登录，不要忘了 rehash password ，源代码: <a href="https://github.com/codeguy/modern-php/blob/master/05-good-practices/passwords/login.php">codeguy&#x2F;modern-php</a></p><pre><code>  &lt;?php  session_start();  try &#123;      // Get email address from request body      $email = filter_input(INPUT_POST, &#39;email&#39;);            // Get password from request body      $password = filter_input(INPUT_POST, &#39;password&#39;);            // Find account with email address (THIS IS PSUEDO-CODE)      $user = User::findByEmail($email);            // Verify password with account password hash      if (password_verify($password, $user-&gt;password_hash) === false) &#123;          throw new Exception(&#39;Invalid password&#39;);      &#125;            // Re-hash password if necessary (see note below)      $currentHashAlgorithm = CRYPT_BLOWFISH;      $currentHashOptions = array(&#39;cost&#39; =&gt; 15);      $passwordNeedsRehash = password_needs_rehash(          $user-&gt;password_hash,          $currentHashAlgorithm,          $currentHashOptions      );      if ($passwordNeedsRehash === true) &#123;                // Save new password hash (THIS IS PSUEDO-CODE)          $user-&gt;password_hash = password_hash(              $password,              $currentHashAlgorithm,              $currentHashOptions          );          $user-&gt;save();      &#125;            // Save login status to session      $_SESSION[&#39;user_logged_in&#39;] = &#39;yes&#39;;      $_SESSION[&#39;user_email&#39;] = $email;            // Redirect to profile page      header(&#39;HTTP/1.1 302 Redirect&#39;);      header(&#39;Location: /user-profile.php&#39;);  &#125; catch (Exception $e) &#123;      header(&#39;HTTP/1.1 401 Unauthorized&#39;);      echo $e-&gt;getMessage();  &#125;</code></pre></li></ul></li></ul><h3 id="流"><a href="#流" class="headerlink" title="流"></a>流</h3><ul><li>在源与目的地之间传输数据。源和目的地可以是文件、内存、命令行、标准输入输入等。</li></ul><h4 id="封装器"><a href="#封装器" class="headerlink" title="封装器"></a>封装器</h4><ul><li>每个流都有协议和目标，格式为<code>&lt;scheme&gt;://&lt;target&gt;</code>，协议<scheme>即为封装器，目标<target>为数据源。常用的封装器有：<ul><li><code>file://</code>. 我们常用的函数如 <code>file_get_contents()</code>, <code>fopen()</code>, <code>fwrite()</code>, <code>fclose()</code> 都是流的封装器。</li><li><code>php://</code>. 标准输入输出的封装器。比如：<code>php://stdin</code>, <code>php://stdout</code>, <code>php://memory</code>, <code>php://temp</code>(类似<code>php://memory</code>, 只是这个写入的是临时文件)。</li></ul></li></ul><h4 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h4><ul><li><p>用于定义流的行为。比如使用<code>stream_context_create()</code>可以让<code>file_get_contents()</code>发送 POST 请求：</p><pre><code>  &lt;?php  $requestBody = &#39;&#123;&quot;username&quot;:&quot;josh&quot;&#125;&#39;;   $context = stream_context_create(array(      &#39;http&#39; =&gt; array(           &#39;method&#39; =&gt; &#39;POST&#39;,               &#39;header&#39; =&gt; &quot;Content-Type: application/json;charset=utf-8;\r\n&quot; .                           &quot;Content-Length: &quot; . mb_strlen($requestBody),               &#39;content&#39; =&gt; $requestBody         )  ));   $response = file_get_contents(&#39;https://my-api.com/users&#39;, false, $context);</code></pre></li></ul><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><ul><li><p>在传输的过程中进行过滤、转换、增加、删除操作。</p></li><li><p>简单的例子，将传输过来的数据全都大写化：</p><pre><code>  &lt;?php   $handle = fopen(&#39;data.txt&#39;, &#39;rb&#39;);   stream_filter_append($handle, &#39;string.toupper&#39;);   while(feof($handle) !== true) &#123;       echo fgets($handle); // &lt;-- Outputs all uppercase characters   &#125;   fclose($handle);</code></pre></li><li><p>另一个例子：</p><pre><code>  &lt;?php   $handle = fopen(&#39;php://filter/read=string.toupper/resource=data.txt&#39;, &#39;rb&#39;);  while(feof($handle) !== true) &#123;       echo fgets($handle); // &lt;-- Outputs all uppercase characters   &#125;   fclose($handle);  </code></pre><ul><li>过滤器写在<code>php://</code>的流封装器里，其标准格式为：<code>filter/read=&lt;filter_name&gt;/resource=&lt;scheme&gt;://&lt;target&gt;</code></li></ul></li><li><p>例子3, 使用bzip分开压缩过去30天的日志文件，每天一个压缩包:</p><pre><code>  &lt;?php  $dateStart = new \DateTime();  $dateInterval = \DateInterval::createFromDateString(&#39;-1 day&#39;);  $datePeriod = new \DatePeriod($dateStart, $dateInterval, 30);  foreach ($datePeriod as $date) &#123;      $file = &#39;sftp://USER:PASS@rsync.net/&#39; . $date-&gt;format(&#39;Y-m-d&#39;) . &#39;.log.bz2&#39;;      if (file_exists($file)) &#123;          $handle = fopen($file, &#39;rb&#39;);          stream_filter_append($handle, &#39;bzip2.decompress&#39;);          while (feof($handle) !== true) &#123;              $line = fgets($handle);              if (strpos($line, &#39;www.example.com&#39;) !== false) &#123;                  fwrite(STDOUT, $line);             &#125;          &#125;          fclose($handle);      &#125;  &#125;</code></pre></li><li><p>自定义过滤器。需完成以下三点：(参考实例：<a href="https://github.com/codeguy/modern-php/blob/master/05-good-practices/streams/DirtyWordsFilter.php">DirtyWordsFilter.php</a>)</p><ul><li>继承内置类<code>php_user_filter</code></li><li>实现<code>filter()</code>, <code>onCreate()</code>, <code>onClose()</code>三个方法</li><li>使用<code>stream_filter_register()</code>注册自定义的过滤器</li></ul></li></ul><h3 id="错误和异常处理"><a href="#错误和异常处理" class="headerlink" title="错误和异常处理"></a>错误和异常处理</h3><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><ul><li><p>设置全局性的异常捕获来保证程序中未捕获的异常最后都会被记录下来。</p><pre><code>  &lt;?php // Register your exception handler   set_exception_handler(function (Exception $e) &#123;       // Handle and log exception   &#125;);    // Your code goes here...  // Restore previous exception handler   restore_exception_handler();  </code></pre></li><li><p>在开发环境中使用异常捕获以及日志来显示所有的DEBUG信息，在生产环境使用用户友好的提示信息。</p></li></ul><h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4><ul><li><p>四个准则</p><ul><li>打开错误报告</li><li>在测试环境中显示错误信息</li><li>不在生产环境中显示错误信息</li><li>无论生产还是开发都应该在日志中记录错误</li></ul></li><li><p>生产环境<code>php.ini</code>示例：</p><pre><code>  ; DO NOT display errors   display_startup_errors = Off      display_errors = Off  ; Report all errors EXCEPT notices   error_reporting = E_ALL &amp; ~E_NOTICE  ; Turn on error logging   log_errors = On  </code></pre></li><li><p>开发环境示例：</p><pre><code>  ; Display errors   display_startup_errors = On   display_errors = On  ; Report all errors   error_reporting = -1  ; Turn on error logging   log_errors = On</code></pre></li></ul><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><ul><li><p>等同于异常处理，错误也是可以被捕获的。如果只是临时使用错误捕获，一定不要忘了在自己的代码完成后恢复：</p><pre><code>  &lt;?php // Register error handler   set_error_handler(function ($errno, $errstr, $errfile, $errline) &#123;       if (!(error_reporting() &amp; $errno)) &#123;           // Error is not specified in the error_reporting           // setting, so we ignore it.          return;       &#125;      throw new ErrorException($errstr, $errno, 0, $errfile, $errline);  &#125;);  // Your code goes here...  // Restore previous error handler   restore_error_handler();</code></pre></li></ul><h4 id="第三方扩展推荐"><a href="#第三方扩展推荐" class="headerlink" title="第三方扩展推荐"></a>第三方扩展推荐</h4><ul><li><a href="https://github.com/filp/whoops">filp&#x2F;whoops</a> 是一个错误处理框架，提供一个优雅的错误界面帮助DEBUG。目前很多主流的框架比如Laraval 5, CakePHP 3等都已经内置了。</li><li><a href="https://github.com/Seldaek/monolog">Seldaek&#x2F;monolog</a> 记录日志的插件</li></ul>]]></content>
    
    
    <summary type="html">PHP 好的编程习惯</summary>
    
    
    
    <category term="编程学习" scheme="https://ericyy.me/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="PHP" scheme="https://ericyy.me/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>VIM的基本命令使用以及插件配置</title>
    <link href="https://ericyy.me/2017-01-04-vim-configuration.html"/>
    <id>https://ericyy.me/2017-01-04-vim-configuration.html</id>
    <published>2017-01-04T05:00:00.000Z</published>
    <updated>2023-03-22T03:14:07.156Z</updated>
    
    <content type="html"><![CDATA[<ul><li>好不容易用英语写完了， 懒得翻译了</li></ul><h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><h3 id="Normal-Mode"><a href="#Normal-Mode" class="headerlink" title="Normal Mode:"></a>Normal Mode:</h3><ul><li>First Open file with VIM command, with get into Normal Mode</li><li><code>h``j``k``l</code> : <code>←``↓``↑``→</code></li><li><code>dd</code> : delete current line</li><li><code>x</code> : delete current character</li><li><code>yy</code> : copy current line</li><li><code>p</code> : paste. It will paste last copied, cut or deleted texts.</li><li><code>^</code> : go to first non-blank character in current line, <code>$</code> to the end</li><li><code>u</code> : undo, <code>&lt;C-r&gt;</code> : redo. <code>g-</code>&#x2F;<code>g+</code> : go to older&#x2F;newer text state</li><li><code>.</code> : repeat last action</li><li><code>N&lt;command&gt;</code> : repeat <code>Command</code> <code>N</code> times. For example, <code>2dd</code> : delete two line</li><li><code>gg</code>: go to first line, <code>G</code> : Go to last line, <code>NG</code> : Go to line <code>N</code> (<code>N</code> stands for a number, for example, <code>10G</code>)</li><li><code>w</code> : move cursor to the beginning of next word, <code>e</code> : move cursor to the end of next word</li><li><code>%</code> : match the closest <code>&#123;</code>, <code>[</code>, <code>(</code></li><li><code>*</code> : search forward for the occurrence of the word nearest to the cursor., <code>#</code> : search backward.</li></ul><h3 id="Insert-Mode"><a href="#Insert-Mode" class="headerlink" title="Insert Mode:"></a>Insert Mode:</h3><ul><li><code>i</code> : Get into Insert Mode, <code>Esc</code> back to Normal Mode</li><li><code>I</code> : Start to insert text at the beginning of the current line</li><li><code>o</code> : Begin a new line below the cursor and insert text</li><li><code>O</code> : Begin a new line above the cursor and insert text</li></ul><h3 id="Command-Mode"><a href="#Command-Mode" class="headerlink" title="Command Mode:"></a>Command Mode:</h3><ul><li>Execute command (<code>:</code>), search patterns<br>(<code>/</code> and <code>?</code>), and filter commands (<code>!</code>)</li><li><code>:wq</code> : Save then quit, <code>:q</code>: Quit, <code>:w</code>: Save, <code>:q!</code>: Quit current file without saving, <code>:qa!</code> Quit all files without saving</li><li><code>:e &lt;path/to/file&gt;</code> : Open another file</li><li><code>:saveas &lt;path/to/file&gt;</code> : Save as another file</li></ul><h2 id="Advance-Usage"><a href="#Advance-Usage" class="headerlink" title="Advance Usage"></a>Advance Usage</h2><h3 id="Insert-Mode-1"><a href="#Insert-Mode-1" class="headerlink" title="Insert Mode:"></a>Insert Mode:</h3><ul><li><code>gi</code> : goto Insert mode where you left it last time</li></ul><h3 id="Normal-Mode-1"><a href="#Normal-Mode-1" class="headerlink" title="Normal Mode:"></a>Normal Mode:</h3><ul><li><p><code>&lt;C-y&gt;</code>, <code>&lt;C-e&gt;</code> : check the text above or below the cursor</p></li><li><p><code>&lt;C-w&gt;w</code> : Switch windows between last one and current one</p></li><li><p><code>&lt;C-w&gt;&lt;dir&gt;</code> : <code>&lt;dir&gt;</code> can be <code>h``j``k``l</code>, switch windows to left, down, up or right.</p></li><li><p>to move at current line</p><ul><li><p><code>0</code> → head</p></li><li><p><code>^</code> → non-blank head</p></li><li><p><code>$</code> → end</p></li><li><p><code>g_</code> → non-blank end</p></li><li><p><code>fa</code> → to next character <code>a</code></p></li><li><p><code>t,</code> → to the character right before the next <code>,</code></p></li><li><p><code>3fa</code> → to the third <code>a</code></p></li><li><p><code>F</code>, <code>T</code> → same as <code>f</code>, <code>t</code> with reverse direction</p><p>  <img src="https://i.imgur.com/mb7T4yD.jpg" alt="line_moves"></p></li></ul></li><li><p>manipulate a text block <code>&lt;C-v&gt;</code>, for example:</p><ul><li><p>add prefixes to multi lines</p><p>  <img src="https://i.imgur.com/CpuySci.gif" alt="rectangular-blocks"></p></li></ul></li></ul><p><code>        *</code>^<code>→ to the head of the line         *</code><C-v><code>→ Start to select a block of text         *</code><C-d><code>→ to move downward, you also can use</code>h<code>j</code>k&#96;&#96;l<code>or</code>%<code>instead         *</code>I–<code> → Insert</code>–<code>        *</code>[ESC]&#96; → to make effects to every line</p><pre><code>* append text to multi lines    ![append-to-many-lines](https://i.imgur.com/Lpxw0LC.gif)    * `&lt;C-v&gt;` → Choose lines (You can also use `j`, `&lt;C-d&gt;`, `/pattern`, `%`, etc.    * `$` → move cursor to the end    * `A` → start to input text, type press `ESC`* indentation    ![autoindent](https://i.imgur.com/0W9g5UD.gif)    * `J` → convert multi lines to single line    * `&lt;` `&gt;` → indent to left or right    * `=` → auto indent</code></pre><h3 id="Visual-Mode"><a href="#Visual-Mode" class="headerlink" title="Visual Mode:"></a>Visual Mode:</h3><ul><li>Block Choosing <code>&lt;action&gt;a&lt;object&gt;</code> or <code>&lt;action&gt;i&lt;object&gt;</code><ul><li><p><code>&lt;action&gt;</code> can be any actions, like <code>d</code>(delete), <code>y</code>(copy), <code>v</code>(text selecting).</p></li><li><p><code>&lt;object&gt;</code> can be <code>w</code>(a word), <code>W</code>(a phrase), <code>s</code>(a sentance), <code>p</code>(a paragraph), or a special symbol like <code>&quot;</code>, <code>&#39;</code>, <code>)</code>, <code>&#125;</code>, <code>]</code>.</p></li><li><p>For example:</p><p> <img src="https://i.imgur.com/zSC9HrJ.png" alt="textobjects"></p><ul><li><code>vi&quot;</code> → foo</li><li><code>va&quot;</code> → “foo”</li><li><code>vi)</code> → “foo”</li><li><code>va)</code> → (“foo”)</li><li><code>v2i)</code> → map (+) (“foo”)</li><li><code>v2a)</code> → (map (+) (“foo”))</li></ul></li></ul></li></ul><h3 id="Command-Mode-1"><a href="#Command-Mode-1" class="headerlink" title="Command Mode:"></a>Command Mode:</h3><ul><li><code>:split</code> : split window horizontally, <code>:vsplit</code> : split window vertically.</li><li><code>q</code> : Record typed characters into register, then repeat them.<ul><li><p><code>qa</code> : record every action into register <code>a</code></p></li><li><p><code>@a</code> : replay it</p></li><li><p><code>@@</code> : to replay the latest register</p></li><li><p>For example:</p><p>  <img src="https://i.imgur.com/8nCWZLj.gif" alt="macros"></p><ul><li><p>In this text file, only have “1” in it, start to input: <code>qaYp&lt;C-a&gt;q</code></p><ul><li><code>qa</code> → start to record</li><li><code>yyp</code> → copy current line to next line</li><li><code>&lt;C-a&gt;</code> → add 1</li><li><code>q</code> → stop recording</li><li><code>@a</code> → write down 2 under 1</li><li><code>@@</code> → write down 3 under 2</li><li><code>100@@</code> → repeat it 100 times.</li></ul></li></ul></li></ul></li><li><code>:[range]s/&lt;pattern&gt;/&lt;replace&gt;/&#123;flags&#125;</code> : replace text<ul><li>TODO</li><li><code>[range]</code></li></ul></li></ul><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><h3 id="Explanations-of-Important-Keywords"><a href="#Explanations-of-Important-Keywords" class="headerlink" title="Explanations of Important Keywords"></a>Explanations of Important Keywords</h3><ul><li><p><code>&lt;Leader&gt;</code>: default is <code>\</code>, you can change it by using <code>let mapleader = &#39;,&#39;</code> in <code>.vimrc</code> file.</p></li><li><p><code>&lt;CR&gt;</code>: equals <code>&lt;Return&gt;</code>    &amp; <code>&lt;Enter&gt;</code></p></li><li><p><code>&lt;S-...&gt;</code>    : shift-key</p></li><li><p><code>&lt;C-...&gt;</code>: control-key</p></li><li><p><code>&lt;M-...&gt;</code> &amp; <code>&lt;A-...&gt;</code>: alt-key</p></li><li><p><code>&lt;D-...&gt;</code>: command-key (Mac only)</p></li><li><p><code>g:</code>: means globally. Example:</p><ul><li><code>let g:last_active_tab = 1</code> toggle switch between current tab and the last one globally.</li></ul></li><li><p><code>remap</code>: Allows for mappings to work recursively.</p></li><li><p><code>noremap</code>: Only a single entry. Can NOT be remapped.</p></li><li><p><code>n</code> &amp; <code>v</code> &amp; <code>s</code> &amp; <code>i</code>: prefixes, <code>n</code> stands for Normal mode, <code>v</code> stands for Visual mode, <code>s</code> stands for Select Mode, <code>i</code> stands for Insert Mode. Example:</p><ul><li><code>nnoremap &lt;C-t&gt; :tabnew&lt;CR&gt;</code>: remap <code>Ctrl + t</code> to create a new tab</li><li><code>inoremap &lt;C-t&gt; &lt;Esc&gt;:tabnew&lt;CR&gt;</code>: same as last one, with an escape action additionally.</li></ul></li><li><p><code>&lt;Plug&gt;</code>: in <code>.vimrc</code> file, it has two meanings. First, it’s visible out of the plugin scripts. And the second, use structure <code>&lt;Plug&gt; scriptname mapname</code> to avoid confliction with other plugins. For example: <code>&lt;Plug&gt;TypecorrAdd</code>, <code>Typecorr</code> is the script name, and <code>Add</code> is the function name.</p></li><li><p><code>&lt;SID&gt;</code>: is the script ID and not visible outside. Compare with <code>&lt;Plug&gt;</code>, it’s more like <code>private</code> function to other scrips. So can’t use it out of the script. Example:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; ,en ,ep to jump between errors</span></span><br><span class="line">function! <span class="symbol">&lt;SID&gt;</span>LocationPrevious()</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">      lprev</span><br><span class="line">  <span class="keyword">catch</span> /^Vim\%((\<span class="keyword">a</span>\+)\)\=:E553/</span><br><span class="line">      <span class="keyword">llast</span></span><br><span class="line">  <span class="keyword">endtry</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line">function! <span class="symbol">&lt;SID&gt;</span>LocationNext()</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">      <span class="keyword">lnext</span></span><br><span class="line">  <span class="keyword">catch</span> /^Vim\%((\<span class="keyword">a</span>\+)\)\=:E553/</span><br><span class="line">      <span class="keyword">lfirst</span></span><br><span class="line">  <span class="keyword">endtry</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;Plug&gt;</span>LocationPrevious :<span class="symbol">&lt;C-u&gt;</span><span class="keyword">exe</span> <span class="string">&#x27;call &lt;SID&gt;LocationPrevious()&#x27;</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;Plug&gt;</span>LocationNext :<span class="symbol">&lt;C-u&gt;</span><span class="keyword">exe</span> <span class="string">&#x27;call &lt;SID&gt;LocationNext()&#x27;</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;Leader&gt;</span>ep <span class="symbol">&lt;Plug&gt;</span>LocationPrevious</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;Leader&gt;</span><span class="keyword">en</span> <span class="symbol">&lt;Plug&gt;</span>LocationNext</span><br></pre></td></tr></table></figure></li><li><p><code>&lt;silence&gt;</code>:  to make a key mapping can&#96;t be echoed on the command line</p></li><li><p><code>&lt;expr&gt;</code> take the argument as expression. For example: <code>inoremap &lt;expr&gt; &lt;C-L&gt; ListItem()</code>, ListItem is a function which is mapped with <code>Ctrl + L</code>.</p></li></ul><h3 id="unblevable-x2F-quick-scope"><a href="#unblevable-x2F-quick-scope" class="headerlink" title="unblevable&#x2F;quick-scope"></a>unblevable&#x2F;quick-scope</h3><ul><li><p>Github Repo: <a href="https://github.com/unblevable/quick-scope">unblevable&#x2F;quick-scope</a></p></li><li><p>Useage: highlights which characters to target for <code>f</code>, <code>F</code> and family.</p></li><li><p>Key Mapping:</p><pre><code>let g:qs_highlight_on_keys = [&#39;f&#39;, &#39;F&#39;, &#39;t&#39;, &#39;T&#39;] //</code></pre></li></ul><h3 id="ntpeters-x2F-vim-better-whitespace"><a href="#ntpeters-x2F-vim-better-whitespace" class="headerlink" title="ntpeters&#x2F;vim-better-whitespace"></a>ntpeters&#x2F;vim-better-whitespace</h3><ul><li><p>Github Repo: <a href="ntpeters/vim-better-whitespace">ntpeters&#x2F;vim-better-whitespace</a></p></li><li><p>Useage: clean extra whitespace.</p></li><li><p>Key Mapping:</p><pre><code>nnoremap &lt;silent&gt; &lt;Leader&gt;&lt;Space&gt; :StripWhitespace&lt;CR&gt;autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl autocmd BufWritePre &lt;buffer&gt; StripWhitespacelet g:better_whitespace_filetypes_blacklist=[&#39;diff&#39;, &#39;gitcommit&#39;, &#39;unite&#39;, &#39;qf&#39;, &#39;help&#39;]</code></pre></li></ul><h3 id="Vim-CtrlSpace"><a href="#Vim-CtrlSpace" class="headerlink" title="Vim-CtrlSpace"></a>Vim-CtrlSpace</h3><ul><li><p>Github Repo: <a href="https://github.com/vim-ctrlspace/vim-ctrlspace">vim-ctrlspace&#x2F;vim-ctrlspace</a></p></li><li><p>Useage:</p><ul><li>bookmarks for your favorite projects</li><li>workspaces (sessions)</li><li>tabs &#x2F; buffers &#x2F; files management</li><li>fast fuzzy searching powered by Go</li></ul></li><li><p>Shortkeys:</p><ul><li><code>Ctrl + Space</code> : open ctrl space command line</li><li><code>b</code> : bookmark list</li><li><code>w</code> : workspace list in current bookmark</li><li><code>l</code> : tab list in current workspace</li><li><code>o</code> : file list in current workspace</li><li><code>h</code> : buffer list in current workspace, this is default list when you hit ctrl + space</li><li><code>/</code> : Into Search Mode, type it again will close search mode. Aka,  <code>B</code>, <code>W</code>, <code>L</code>, <code>O</code>, <code>H</code> with uppercase will open the same list with Search Mode</li><li><code>i</code> : switch directory (when you on the buffer list)</li><li><code>a</code> : all the files are opend in current workspace</li><li><code>s</code> : save current workspace&#x2F;bookmark, then <code>&lt;CR&gt;</code> to confirm</li><li><code>d</code> : delete a file from current buffer or file list</li><li><code>j</code>,<code>k</code> : switch items, then <code>&lt;CR&gt;</code> to confirm</li><li><code>m</code> : rename bookmark or workspace(when you on the workspace list or bookmark list)</li></ul></li><li><p>Key Mapping:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">&quot;gui_running&quot;</span>)</span><br><span class="line"><span class="comment">&quot; Settings for MacVim and Inconsolata font</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">g:CtrlSpaceSymbols</span> = &#123; <span class="string">&quot;File&quot;</span>: <span class="string">&quot;◯&quot;</span>, <span class="string">&quot;CTab&quot;</span>: <span class="string">&quot;▣&quot;</span>, <span class="string">&quot;Tabs&quot;</span>: <span class="string">&quot;▢&quot;</span> &#125;</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">executable</span>(<span class="string">&quot;ag&quot;</span>)</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">g:CtrlSpaceGlobCommand</span> = <span class="string">&#x27;ag -l --nocolor -g &quot;&quot;&#x27;</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:CtrlSpaceSearchTiming</span> = <span class="number">500</span></span><br><span class="line"><span class="keyword">hi</span> link CtrlSpaceNormal   PMenu</span><br><span class="line"><span class="keyword">hi</span> link CtrlSpaceSelected PMenuSel</span><br><span class="line"><span class="keyword">hi</span> link CtrlSpaceSearch   Search</span><br><span class="line"><span class="keyword">hi</span> link CtrlSpaceStatus   StatusLine</span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;C-p&gt;</span> :CtrlSpace O<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:CtrlSpaceLoadLastWorkspaceOnStart</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:CtrlSpaceSaveWorkspaceOnSwitch</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:CtrlSpaceSaveWorkspaceOnExit</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="scrooloose-x2F-nerdtree-amp-jistr-x2F-vim-nerdtree-tabs"><a href="#scrooloose-x2F-nerdtree-amp-jistr-x2F-vim-nerdtree-tabs" class="headerlink" title="scrooloose&#x2F;nerdtree &amp; jistr&#x2F;vim-nerdtree-tabs"></a>scrooloose&#x2F;nerdtree &amp; jistr&#x2F;vim-nerdtree-tabs</h3><ul><li><p>TODO</p></li><li><p>Github Repo: <a href="https://github.com/scrooloose/nerdtree">scrooloose&#x2F;nerdtree</a> &amp; <a href="https://github.com/jistr/vim-nerdtree-tabs">jistr&#x2F;vim-nerdtree-tabs</a></p></li><li><p>Useage: to explore filesystem and to open files and directories.</p></li><li><p>Key Mapping:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; nerdtree</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;C-n&gt;</span> :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeHighlightCursorline=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeIgnore=[ <span class="string">&#x27;\.pyc$&#x27;</span>, <span class="string">&#x27;\.pyo$&#x27;</span>, <span class="string">&#x27;\.obj$&#x27;</span>, <span class="string">&#x27;\.o$&#x27;</span>, <span class="string">&#x27;\.so$&#x27;</span>, <span class="string">&#x27;\.egg$&#x27;</span>, <span class="string">&#x27;^\.git$&#x27;</span>, <span class="string">&#x27;^\.svn$&#x27;</span>, <span class="string">&#x27;^\.hg$&#x27;</span> ]</span><br><span class="line"><span class="comment">&quot;close vim if the only window left open is a NERDTree</span></span><br><span class="line"><span class="keyword">autocmd</span> bufenter * <span class="keyword">if</span> (<span class="built_in">winnr</span>(<span class="string">&quot;$&quot;</span>) == <span class="number">1</span> &amp;&amp; <span class="built_in">exists</span>(<span class="string">&quot;b:NERDTreeType&quot;</span>) &amp;&amp; <span class="variable">b:NERDTreeType</span> == <span class="string">&quot;primary&quot;</span>) | q | end</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeMapOpenSplit</span> = <span class="string">&#x27;s&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeMapOpenVSplit</span> = <span class="string">&#x27;v&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeWinSize</span>=<span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; nerdtreetabs</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;C-n&gt;</span> <span class="symbol">&lt;plug&gt;</span>NERDTreeTabsToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:nerdtree_tabs_synchronize_view</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:nerdtree_tabs_synchronize_focus</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:nerdtree_tabs_open_on_console_startup</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:nerdtree_tabs_open_on_gui_startup</span>=<span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="syntastic"><a href="#syntastic" class="headerlink" title="syntastic"></a>syntastic</h3><ul><li><p>Github Repo: <a href="https://github.com/vim-syntastic/syntastic#introduction">vim-syntastic&#x2F;syntastic</a></p></li><li><p>Useage: a syntax checking plugin</p></li><li><p>Key Mapping:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">execute</span> pathogen#infect()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_error_symbol</span>=<span class="string">&#x27;&gt;&gt;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_warning_symbol</span>=<span class="string">&#x27;&gt;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_check_on_open</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_check_on_wq</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_enable_highlighting</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; checkers</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_php_checkers</span> = [<span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;phpcs&#x27;</span>, <span class="string">&#x27;phpmd&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_python_checkers</span>=[<span class="string">&#x27;pyflakes&#x27;</span>, <span class="string">&#x27;pep8&#x27;</span>] <span class="comment">&quot; 使用pyflakes,速度比pylint快</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_python_pep8_args</span>=<span class="string">&#x27;--ignore=E501,E225,E124,E712&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_javascript_checkers</span> = [<span class="string">&#x27;jsl&#x27;</span>, <span class="string">&#x27;jshint&#x27;</span>]</span><br><span class="line"><span class="comment">&quot; let g:syntastic_markdown_checkers = [&#x27;proselint&#x27;]</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_html_checkers</span>=[<span class="string">&#x27;tidy&#x27;</span>, <span class="string">&#x27;jshint&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> statusline+=%#warningmsg#</span><br><span class="line"><span class="keyword">set</span> statusline+=%&#123;SyntasticStatuslineFlag()&#125;</span><br><span class="line"><span class="keyword">set</span> statusline+=%*</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; to see error location list</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_always_populate_loc_list</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_enable_signs</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_auto_loc_list</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_auto_jump</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">highlight</span> SyntasticErrorSign guifg=white guibg=black</span><br></pre></td></tr></table></figure></li></ul><h3 id="YouCompleteMe"><a href="#YouCompleteMe" class="headerlink" title="YouCompleteMe"></a>YouCompleteMe</h3><ul><li><p>Github Repo: <a href="https://github.com/Valloric/YouCompleteMe">Valloric&#x2F;YouCompleteMe</a></p></li><li><p>Useage: code completion</p></li><li><p>Key Mapping:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_key_list_select_completion</span>=[<span class="string">&#x27;&lt;C-j&gt;&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_key_list_previous_completion</span>=[<span class="string">&#x27;&lt;C-k&gt;&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_complete_in_comments</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_complete_in_strings</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_use_ultisnips_completer</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_collect_identifiers_from_comments_and_strings</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_collect_identifiers_from_tags_files</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_seed_identifiers_with_syntax</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_goto_buffer_command</span> = <span class="string">&#x27;horizontal-split&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>jd :YcmCompleter GoToDefinitionElseDeclaration<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>gd :YcmCompleter GoToDeclaration<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !empty(<span class="built_in">glob</span>(<span class="string">&quot;~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py&quot;</span>))</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">g:ycm_global_ycm_extra_conf</span> = <span class="string">&quot;~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py&quot;</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="vim-easymotion"><a href="#vim-easymotion" class="headerlink" title="vim-easymotion"></a>vim-easymotion</h3><ul><li><p>Github Repo: <a href="https://github.com/easymotion/vim-easymotion">easymotion&#x2F;vim-easymotion</a></p></li><li><p>Usage: Provides a much simpler way to use some motions in vim.</p></li><li><p>Keys Mapping:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">g:EasyMotion_smartcase</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; &lt;Leader&gt;f&#123;char&#125; to move to &#123;char&#125;</span></span><br><span class="line"><span class="keyword">map</span>  <span class="symbol">&lt;Leader&gt;</span><span class="symbol">&lt;Leader&gt;</span><span class="keyword">f</span> <span class="symbol">&lt;Plug&gt;</span>(easymotion-<span class="keyword">bd</span>-<span class="keyword">f</span>)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;Leader&gt;</span><span class="symbol">&lt;Leader&gt;</span><span class="keyword">f</span> <span class="symbol">&lt;Plug&gt;</span>(easymotion-overwin-<span class="keyword">f</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; s&#123;char&#125;&#123;char&#125; to move to &#123;char&#125;&#123;char&#125;</span></span><br><span class="line"><span class="keyword">nmap</span> s <span class="symbol">&lt;Plug&gt;</span>(easymotion-overwin-f2)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Move to line</span></span><br><span class="line"><span class="keyword">map</span>  <span class="symbol">&lt;Leader&gt;</span><span class="symbol">&lt;Leader&gt;</span><span class="keyword">l</span> <span class="symbol">&lt;Plug&gt;</span>(easymotion-<span class="keyword">bd</span>-jk)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;Leader&gt;</span><span class="symbol">&lt;Leader&gt;</span><span class="keyword">l</span> <span class="symbol">&lt;Plug&gt;</span>(easymotion-overwin-<span class="built_in">line</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="easyalign"><a href="#easyalign" class="headerlink" title="easyalign"></a>easyalign</h3><ul><li><p>Github Repo: <a href="https://github.com/junegunn/vim-easy-align">junegunn&#x2F;vim-easy-align</a></p></li><li><p>Usage: alignment</p></li><li><p>Keys Mapping:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vmap</span> ga <span class="symbol">&lt;Plug&gt;</span>(EasyAlign)</span><br><span class="line"><span class="keyword">nmap</span> ga <span class="symbol">&lt;Plug&gt;</span>(EasyAlign)</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:easy_align_ignore_groups</span> = [<span class="string">&#x27;Comment&#x27;</span>, <span class="string">&#x27;String&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:easy_align_delimiters</span> = &#123;</span><br><span class="line">   \ <span class="string">&#x27;&gt;&#x27;</span>: &#123; <span class="string">&#x27;pattern&#x27;</span>: <span class="string">&#x27;&gt;&gt;\|=&gt;\|&gt;&#x27;</span> &#125;,</span><br><span class="line">   \ <span class="string">&#x27;/&#x27;</span>: &#123;</span><br><span class="line">   \     <span class="string">&#x27;pattern&#x27;</span>:         <span class="string">&#x27;//\+\|/\*\|\*/&#x27;</span>,</span><br><span class="line">   \     <span class="string">&#x27;delimiter_align&#x27;</span>: <span class="string">&#x27;l&#x27;</span>,</span><br><span class="line">   \     <span class="string">&#x27;ignore_groups&#x27;</span>:   [<span class="string">&#x27;!Comment&#x27;</span>] &#125;,</span><br><span class="line">   \ <span class="string">&#x27;]&#x27;</span>: &#123;</span><br><span class="line">   \     <span class="string">&#x27;pattern&#x27;</span>:       <span class="string">&#x27;[[\]]&#x27;</span>,</span><br><span class="line">   \     <span class="string">&#x27;left_margin&#x27;</span>:   <span class="number">0</span>,</span><br><span class="line">   \     <span class="string">&#x27;right_margin&#x27;</span>:  <span class="number">0</span>,</span><br><span class="line">   \     <span class="string">&#x27;stick_to_left&#x27;</span>: <span class="number">0</span></span><br><span class="line">   \   &#125;,</span><br><span class="line">   \ <span class="string">&#x27;)&#x27;</span>: &#123;</span><br><span class="line">   \     <span class="string">&#x27;pattern&#x27;</span>:       <span class="string">&#x27;[()]&#x27;</span>,</span><br><span class="line">   \     <span class="string">&#x27;left_margin&#x27;</span>:   <span class="number">0</span>,</span><br><span class="line">   \     <span class="string">&#x27;right_margin&#x27;</span>:  <span class="number">0</span>,</span><br><span class="line">   \     <span class="string">&#x27;stick_to_left&#x27;</span>: <span class="number">0</span></span><br><span class="line">   \   &#125;,</span><br><span class="line">   \ <span class="string">&#x27;d&#x27;</span>: &#123;</span><br><span class="line">   \     <span class="string">&#x27;pattern&#x27;</span>:      <span class="string">&#x27; \(\S\+\s*[;=]\)\@=&#x27;</span>,</span><br><span class="line">   \     <span class="string">&#x27;left_margin&#x27;</span>:  <span class="number">0</span>,</span><br><span class="line">   \     <span class="string">&#x27;right_margin&#x27;</span>: <span class="number">0</span></span><br><span class="line">   \   &#125;</span><br><span class="line">   \ &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="NerdTree"><a href="#NerdTree" class="headerlink" title="NerdTree"></a>NerdTree</h3><ul><li><p>Github Repo: <a href="https://github.com/scrooloose/nerdtree">scrooloose&#x2F;nerdtree</a></p></li><li><p>Usage: to explore your filesystem and to open files and directories.</p></li><li><p>Keys Mapping:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;leader&gt;</span>n :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeShowBookmarks=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeHighlightCursorline=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeIgnore=[ <span class="string">&#x27;\.pyc$&#x27;</span>, <span class="string">&#x27;\.pyo$&#x27;</span>, <span class="string">&#x27;\.obj$&#x27;</span>, <span class="string">&#x27;\.o$&#x27;</span>, <span class="string">&#x27;\.so$&#x27;</span>, <span class="string">&#x27;\.egg$&#x27;</span>, <span class="string">&#x27;^\.git$&#x27;</span>, <span class="string">&#x27;^\.svn$&#x27;</span>, <span class="string">&#x27;^\.hg$&#x27;</span> ]</span><br><span class="line"><span class="comment">&quot;close vim if the only window left open is a NERDTree</span></span><br><span class="line"><span class="keyword">autocmd</span> bufenter * <span class="keyword">if</span> (<span class="built_in">winnr</span>(<span class="string">&quot;$&quot;</span>) == <span class="number">1</span> &amp;&amp; <span class="built_in">exists</span>(<span class="string">&quot;b:NERDTreeType&quot;</span>) &amp;&amp; <span class="variable">b:NERDTreeType</span> == <span class="string">&quot;primary&quot;</span>) | q | end</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeMapOpenSplit</span> = <span class="string">&#x27;s&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeMapOpenVSplit</span> = <span class="string">&#x27;v&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeWinSize</span>=<span class="number">26</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="NERDCommenter"><a href="#NERDCommenter" class="headerlink" title="NERDCommenter"></a>NERDCommenter</h3><ul><li><p>Github Repo: <a href="https://github.com/scrooloose/nerdcommenter">scrooloose&#x2F;nerdcommenter</a></p></li><li><p>Usage: to wrangle your code comments.</p></li><li><p>Shortkeys:</p><ul><li><code>[count]&lt;leader&gt;cc</code> : Comment out the current line or text selected in visual mode.</li><li><code>[count]&lt;leader&gt;c&lt;space&gt;</code> : Toggles the comment state of the selected line(s). If the topmost selected line is commented, all selected lines are uncommented and vice versa.</li><li><code>[count]&lt;leader&gt;cs</code> : Comments out the selected lines with a pretty block formatted layout.</li><li><code>[count]&lt;leader&gt;ci</code> : Toggles the comment state of the selected line(s) individually.</li></ul></li><li><p>Keys Mapping:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; Add spaces after comment delimiters by default</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDSpaceDelims</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">&quot; Use compact syntax for prettified multi-line comments</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDCompactSexyComs</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">&quot; Align line-wise comment delimiters flush left instead of following code indentation</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDDefaultAlign</span> = <span class="string">&#x27;left&#x27;</span></span><br><span class="line"><span class="comment">&quot; Allow commenting and inverting empty lines (useful when commenting a region)</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDCommentEmptyLines</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Airline"><a href="#Airline" class="headerlink" title="Airline"></a>Airline</h3><ul><li><p>Github Repo: <a href="https://github.com/vim-airline/vim-airline">vim-airline&#x2F;vim-airline</a></p></li><li><p>Usage: rich statusbar.</p></li><li><p>Keys Mapping:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> !exists(<span class="string">&#x27;g:airline_symbols&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">g:airline_symbols</span> = &#123;&#125;</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_mode_map</span> = &#123;</span><br><span class="line">    \ <span class="string">&#x27;__&#x27;</span> : <span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">    \ <span class="string">&#x27;n&#x27;</span>  : <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">    \ <span class="string">&#x27;i&#x27;</span>  : <span class="string">&#x27;I&#x27;</span>,</span><br><span class="line">    \ <span class="string">&#x27;R&#x27;</span>  : <span class="string">&#x27;R&#x27;</span>,</span><br><span class="line">    \ <span class="string">&#x27;c&#x27;</span>  : <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">    \ <span class="string">&#x27;v&#x27;</span>  : <span class="string">&#x27;V&#x27;</span>,</span><br><span class="line">    \ <span class="string">&#x27;V&#x27;</span>  : <span class="string">&#x27;V&#x27;</span>,</span><br><span class="line">    \ <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;V&#x27;</span>,</span><br><span class="line">    \ <span class="string">&#x27;s&#x27;</span>  : <span class="string">&#x27;S&#x27;</span>,</span><br><span class="line">    \ <span class="string">&#x27;S&#x27;</span>  : <span class="string">&#x27;S&#x27;</span>,</span><br><span class="line">    \ <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;S&#x27;</span>,</span><br><span class="line">    \ &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_left_sep</span> = <span class="string">&#x27;❯&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_right_sep</span> = <span class="string">&#x27;❮&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_symbols</span>.linenr = <span class="string">&#x27;¶&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_symbols</span>.branch = <span class="string">&#x27;⎇&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><!---### a* Github Repo: [b](c)* Useage: d* Key Mapping:        e-->]]></content>
    
    
    <summary type="html">VIM的基本命令使用以及插件配置</summary>
    
    
    
    <category term="编程学习" scheme="https://ericyy.me/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Mac" scheme="https://ericyy.me/tags/Mac/"/>
    
    <category term="VIM" scheme="https://ericyy.me/tags/VIM/"/>
    
  </entry>
  
  <entry>
    <title>Mac上配置GH60键盘</title>
    <link href="https://ericyy.me/2016-12-30-keyboard-conf.html"/>
    <id>https://ericyy.me/2016-12-30-keyboard-conf.html</id>
    <published>2016-12-30T05:00:00.000Z</published>
    <updated>2022-02-12T20:53:10.505Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装必要的工具"><a href="#安装必要的工具" class="headerlink" title="安装必要的工具"></a>安装必要的工具</h3><pre><code>brew install Caskroom/cask/crosspack-avrbrew install dfu-programmercd ~git clone --recursive https://github.com/kairyu/tmk_keyboard_custom.git</code></pre><ul><li><p>检查 <code>avr-gcc</code> 命令是否可用</p><ul><li><p>直接在命令行执行 <code>avr-gcc</code>, 如果出现command not found, 在命令行执行：</p><pre><code>  PATH=&quot;/usr/local/CrossPack-AVR/bin:$PATH&quot;  export $PATH  </code></pre></li><li><p>以上命令是临时把路径 <code>/usr/local/CrossPack-AVR/bin</code> 放到 <code>PATH</code> 中，关闭Terminal后失效</p></li></ul></li></ul><h3 id="修改配置文件来支持GH60-REV-CHN"><a href="#修改配置文件来支持GH60-REV-CHN" class="headerlink" title="修改配置文件来支持GH60_REV_CHN"></a>修改配置文件来支持GH60_REV_CHN</h3><ul><li><p><code>cd ./tmk_keyboard_custom/keyboard/gh60</code></p></li><li><p><code>vi config.h</code></p></li><li><p>找到 <code>#define CONFIG_H</code>, 在底下加上 <code>#define GH60_REV_CHN</code></p></li><li><p><code>vi Makefile</code></p></li><li><p>注释或删掉下面这行代码</p><pre><code>  KEYMAP_IN_EEPROM_ENABLE = yes # Read keymap from eeprom</code></pre></li></ul><h3 id="连接测试键盘"><a href="#连接测试键盘" class="headerlink" title="连接测试键盘"></a>连接测试键盘</h3><ul><li><p>连接后输入入下列指令</p><pre><code>  system_profiler SPUSBDataType</code></pre></li><li><p>应该会出现：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GH60:</span><br><span class="line">   Product ID: 0x6060</span><br><span class="line">   Vendor ID: 0xfeed</span><br><span class="line">   Version: 0.01</span><br><span class="line">   Speed: Up to 12 Mb/sec</span><br><span class="line">   Manufacturer: geekhack</span><br><span class="line">   Location ID: 0x14400000 / 37</span><br><span class="line">   Current Available (mA): 500</span><br><span class="line">   Current Required (mA): 100</span><br><span class="line">   Extra Operating Current (mA): 0</span><br></pre></td></tr></table></figure><ul><li><p>然后按下键盘背部的按钮</p></li><li><p>再次执行命令</p><pre><code>  system_profiler SPUSBDataType</code></pre></li><li><p>应该会出现：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ATm32U4DFU:</span><br><span class="line">    Product ID: 0x2ff4</span><br><span class="line">    Vendor ID: 0x03eb  (Atmel Corporation)</span><br><span class="line">    Version: 0.00</span><br><span class="line">    Serial Number: 1.0.0</span><br><span class="line">    Speed: Up to 12 Mb/sec</span><br><span class="line">    Manufacturer: ATMEL</span><br><span class="line">    Location ID: 0x14100000 / 15</span><br><span class="line">    Current Available (mA): 500</span><br><span class="line">    Current Required (mA): Unknown (Device has not been configured)</span><br></pre></td></tr></table></figure><ul><li><p>可以开始刷配置了，如果没信心，还是先用 poker 的 layout 来试试吧</p><pre><code>  poker layout</code></pre></li><li><p>切换到目录 <code>gh60</code> 下执行</p><pre><code>  make dfu</code></pre></li><li><p>刷出以下内容表示成功</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Creating load file for Flash: gh60_lufa.hex</span><br><span class="line">avr-objcopy -O ihex -R .eeprom -R .fuse -R .lock -R .signature gh60_lufa.elf gh60_lufa.hex</span><br><span class="line">dfu-programmer atmega32u4 erase --force</span><br><span class="line">Erasing flash...  Success</span><br><span class="line">Checking memory from 0x0 to 0x6FFF...  Empty.</span><br><span class="line">dfu-programmer atmega32u4 flash gh60_lufa.hex</span><br><span class="line">Checking memory from 0x0 to 0x61FF...  Empty.</span><br><span class="line">0%                            100%  Programming 0x6200 bytes...</span><br><span class="line">[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]  Success</span><br><span class="line">0%                            100%  Reading 0x7000 bytes...</span><br><span class="line">[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]  Success</span><br><span class="line">Validating...  Success</span><br><span class="line">0x6200 bytes written into 0x7000 bytes memory (87.50%).</span><br><span class="line">dfu-programmer atmega32u4 reset</span><br></pre></td></tr></table></figure><h3 id="开始制作自己的layout"><a href="#开始制作自己的layout" class="headerlink" title="开始制作自己的layout"></a>开始制作自己的layout</h3><ul><li><p><a href="http://www.keyboard-layout-editor.com/">http://www.keyboard-layout-editor.com/</a> 生成raw data</p></li><li><p><a href="https://yang.hging.net/tkg/">https://yang.hging.net/tkg/</a> 把raw data生成<code>.c</code>文件</p></li><li><p>参考<a href="http://blog.dm4.tw/blog/2015/03/17/build-gh60-revchn-on-mac/">dm4</a>设计的layout，觉得不错稍加改了下:</p><ul><li><p>Layer 0 (Default)</p><pre><code>  http://www.keyboard-layout-editor.com/#/gists/907d4f327ee92188cb929044ec186c39</code></pre></li><li><p>Layer 1 (Fn0层)</p><pre><code>  http://www.keyboard-layout-editor.com/#/gists/a460aca35c9eedab94433f6c297ef94c</code></pre></li><li><p>keymap generator 的设定</p><pre><code>  Keyboard - GH60 (RevCHN)  Layer Mode - Normal  Number of Layers - 2  Layer0 - Default  Layer1 - Function layer  Fn - Layer action &gt; Momentary layer 1</code></pre></li><li><p>Fn Momentary layer 1 的意思就是当 fn 按下时是 layer 1 的 keymap 但不按 fn 时就关掉 layer1</p></li><li><p>下载 <code>.c</code> 文件, 把名字改成 <code>keymap_tkg.c</code></p></li><li><p>放到 <code>gh60</code> 目录下边</p></li><li><p>执行 <code>make KEYMAP=tkg dfu</code></p></li></ul></li></ul><h3 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h3><h3 id="记录下现有的问题"><a href="#记录下现有的问题" class="headerlink" title="记录下现有的问题"></a>记录下现有的问题</h3><ul><li>&#96;Fn+RCommand+Delete 连按几下会导致 Command 键按下事件，每次再按其他键的时候都成了Command+键的效果。现在的解决方案就是重新多按几个那个组合。。。。</li></ul><h3 id="Refer-to"><a href="#Refer-to" class="headerlink" title="Refer to"></a>Refer to</h3><ul><li><a href="http://blog.dm4.tw/blog/2015/03/17/build-gh60-revchn-on-mac/">http://blog.dm4.tw/blog/2015/03/17/build-gh60-revchn-on-mac/</a></li><li><a href="https://www.ptt.cc/bbs/Key_Mou_Pad/M.1430970988.A.4D9.html">https://www.ptt.cc/bbs/Key_Mou_Pad/M.1430970988.A.4D9.html</a></li></ul>]]></content>
    
    
    <summary type="html">在Mac上编译GH60 RevCHN Firmware</summary>
    
    
    
    <category term="生活随想" scheme="https://ericyy.me/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="效率工具" scheme="https://ericyy.me/tags/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Mac" scheme="https://ericyy.me/tags/Mac/"/>
    
    <category term="键盘" scheme="https://ericyy.me/tags/%E9%94%AE%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>提升生产效率的工具集锦(APP)</title>
    <link href="https://ericyy.me/2016-12-11-be-productive-for-mac-1.html"/>
    <id>https://ericyy.me/2016-12-11-be-productive-for-mac-1.html</id>
    <published>2016-12-11T05:00:00.000Z</published>
    <updated>2022-02-12T20:53:10.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="按键说明"><a href="#按键说明" class="headerlink" title="按键说明"></a>按键说明</h2><ul><li>⌘ – Command Key</li><li>⇥ – Tab Key</li><li>⌃ – Control Key</li><li>⌥ – Option Key</li><li>⇧ – Shift Key</li><li>⏎ – Return Key</li><li>← Left Arrow Key</li><li>→ Right Arrow Key</li></ul><h2 id="APPS"><a href="#APPS" class="headerlink" title="APPS"></a>APPS</h2><h3 id="Alfred-3"><a href="#Alfred-3" class="headerlink" title="Alfred 3"></a>Alfred 3</h3><p>强大的启动器, 拥有各种快捷入口, 不仅仅是用来代替Spotlight。增强的workflow更让繁琐的操作变得简单起来。</p><ul><li>下载: <a href="https://www.alfredapp.com/">官网</a></li><li>Powerpack 需要付费, £19起</li><li>可设置启动命令, 本人使用 <code>⌥+⌘</code>, 好像是默认的。</li><li>本人会禁用掉Spotlight及其索引功能来提升性能:<ul><li>打开 系统设置 - Spotlight</li><li>取消掉所有在Spotlight中的搜索结果，以及建议查找的功能</li><li>左下角选择键盘快捷键, 取消两个已选中两个搜索</li></ul></li></ul><h3 id="Flycut"><a href="#Flycut" class="headerlink" title="Flycut"></a>Flycut</h3><p>剪切板管理器</p><ul><li>下载: <a href="http://itunes.apple.com/us/app/flycut-clipboard-manager/id442160987?mt=12">App Store</a> &#x2F; <a href="https://github.com/TermiT/Flycut">Github</a></li><li>快捷键：<code>⇧+⌘+p</code>, 可以不停地按<code>p</code>来切换，或者使用<code>← →</code>方向键</li><li>注：Alfred 3也提供了剪切板的功能，个人觉得不够便捷，在使用Flycut的时候，可以考虑给关了。</li><li>可设置为开机启动</li></ul><h3 id="f-lux"><a href="#f-lux" class="headerlink" title="f.lux"></a>f.lux</h3><p>护眼神器。根据一天的时间来调节屏幕的亮度，在晚上屏幕会变成暖色调。</p><ul><li>下载： <a href="https://justgetflux.com/">官网</a></li><li>可设置为开机启动</li></ul><h3 id="Spectacle"><a href="#Spectacle" class="headerlink" title="Spectacle"></a>Spectacle</h3><p>快捷键调节窗口大小，比如: <code>⌥+⌘+F</code>全屏, <code>⌃+⌘+←</code> 左三分之一屏</p><ul><li>下载: <a href="https://www.spectacleapp.com/">官网</a></li><li>可设置为开机启动</li></ul><h3 id="CheatSheets"><a href="#CheatSheets" class="headerlink" title="CheatSheets"></a>CheatSheets</h3><p>按住<code>⌘</code>显示当前应用的所有快捷键</p><ul><li>下载: <a href="https://cheatsheetapp.com/CheatSheet/?lang=en">官网</a></li></ul><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><p>快速安装软件的管理器</p><ul><li>下载: <a href="http://brew.sh/">官网</a></li><li>安装: <code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></li></ul><h3 id="Aria2"><a href="#Aria2" class="headerlink" title="Aria2"></a>Aria2</h3><p>实现百度云, 115, 迅雷离线等满速下载。Aria2是个命令行管理工作，所以默认安装后需要做一些配置才能运行。不想折腾的可直接下载<a href="https://github.com/yangshun1029">yangshun1029</a>封装好的<a href="https://github.com/yangshun1029/aria2gui">Aria2gui</a>.</p><p>以下是各种折腾的方案。</p><ul><li><p>下载: <a href="https://aria2.github.io/">官网</a> ／ 安装: <code>brew install aria2</code></p></li><li><p>使用方法有三种。命令行、Web+命令行、Alfred Workflow。</p><ul><li>命令行方面使用可见<a href="https://aria2.github.io/">官方文档 </a></li><li>Web和Alfred Workflow管理见下文介绍</li></ul></li><li><p>嵌入式 Chrome 插件: <a href="https://github.com/acgotaku/115"><code>115</code></a>, <a href="https://github.com/acgotaku/BaiduExporter"><code>百度云</code></a>。 这两个由<a href="https://github.com/acgotaku/"><code>雪月秋水君</code></a>开发的插件可以直接嵌入百度云和115网盘网页内，实现点击即可转到Aria2下载，非常方便。</p></li><li><p>Web 管理界面:</p><ol><li>首先命令行启动 <code>aria2c --enable-rpc --rpc-listen-all</code></li><li><a href="http://binux.github.io/yaaw/demo/">http://binux.github.io/yaaw/demo/</a><ul><li>需要设置JSON-RPC Path: <code>http://localhost:6800/jsonrpc</code></li></ul></li><li>使用<a href="https://github.com/acgotaku/"><code>雪月秋水君</code></a>开发的Chrome插件: <a href="https://github.com/acgotaku/YAAW-for-Chrome">YAAW</a></li></ol></li><li><p>Workflow for Alfred: <a href="https://github.com/Wildog/Ariafred">https://github.com/Wildog/Ariafred</a></p><ul><li><a href="http://wil.dog/ariafred/">官方文档</a></li><li>注: Workflow 属于powerpack付费功能</li><li>常用命令:<ul><li>添加任务: 输入 <code>add</code> 然后追加任务地址<ul><li>BT种子任务需要执行文件动作，然后选择&#96;Add BT do…load to Aria2</li></ul></li><li>移除任务: 输入 <code>rm</code> 然后选择任务后 <code>回车</code></li><li>暂停&#x2F;恢复任务: 输入 <code>pause</code>&#x2F;<code>resume</code> 然后选择任务后 <code>回车</code></li><li>清除所有任务: 输入<code>clear</code> 然后 <code>回车</code></li></ul></li></ul></li><li><p>配置</p><ul><li><p>个人觉得本地运行没必要搞太复杂就不再多写了。有兴趣的可参照<a href="https://github.com/acgotaku/"><code>雪月秋水君</code></a>提供的<code>aria2.conf</code>:</p><pre><code>  #用户名  #rpc-user=user  #密码  #rpc-passwd=passwd  #上面的认证方式不建议使用,建议使用下面的token方式  #设置加密的密钥  #rpc-secret=token  #允许rpc  enable-rpc=true  #允许所有来源, web界面跨域权限需要  rpc-allow-origin-all=true  #允许外部访问，false的话只监听本地端口  rpc-listen-all=true  #RPC端口, 仅当默认端口被占用时修改  #rpc-listen-port=6800  #最大同时下载数(任务数), 路由建议值: 3  max-concurrent-downloads=5  #断点续传  continue=true  #同服务器连接数  max-connection-per-server=5  #最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要  min-split-size=10M  #单文件最大线程数, 路由建议值: 5  split=10  #下载速度限制  max-overall-download-limit=0  #单文件速度限制  max-download-limit=0  #上传速度限制  max-overall-upload-limit=0  #单文件速度限制  max-upload-limit=0  #断开速度过慢的连接  #lowest-speed-limit=0  #验证用，需要1.16.1之后的release版本  #referer=*  #文件保存路径, 默认为当前启动位置  dir=/Users/xxx/Downloads  #文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本  #disk-cache=0  #另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)  #enable-mmap=true  #文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长  #所需时间 none &lt; falloc ? trunc « prealloc, falloc和trunc需要文件系统和内核支持  file-allocation=prealloc</code></pre></li><li><p>在启动Aria2的时候别忘了加上配置的绝对路径，例: <code>aria2c --conf-path=&quot;/Users/username/aria2.conf&quot;</code></p></li></ul></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>1Password - 最好用的密码管理软件</li><li>PDF Expert - PDF编辑阅读器</li><li>Fantisical2 - 增强版日历，集成了提醒事项</li><li>MWeb - markdown编辑软件，可实时预览，且支持保存到evernote，导出为pdf、docx等格式。此外还支持直接在Wordpress、Mediun等网站发布。</li><li>Typora - 超简洁等markdown编辑软件，单一窗口，实时预览。</li><li>OmniFocus 2 - 最强大的GTD管理工具</li><li>Pandoc -  命令行文件格式互转工具，格式包括docx,markdown, epub, pdf等，官网：<a href="http://pandoc.org/">http://pandoc.org/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;按键说明&quot;&gt;&lt;a href=&quot;#按键说明&quot; class=&quot;headerlink&quot; title=&quot;按键说明&quot;&gt;&lt;/a&gt;按键说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;⌘ – Command Key&lt;/li&gt;
&lt;li&gt;⇥ – Tab Key&lt;/li&gt;
&lt;li&gt;⌃ – Contro</summary>
      
    
    
    
    <category term="生活随想" scheme="https://ericyy.me/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="效率工具" scheme="https://ericyy.me/tags/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Get Start - Elasticsearch 学习实践 (1)</title>
    <link href="https://ericyy.me/2016-11-17-elasticsearch-01-getstart.html"/>
    <id>https://ericyy.me/2016-11-17-elasticsearch-01-getstart.html</id>
    <published>2016-11-17T05:00:00.000Z</published>
    <updated>2023-03-22T03:14:07.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>索引(indix)： 相当于关系型数据库的数据库。</li><li>类型(type)：相当于关系型数据库的表。</li><li>文档(Document)： 相当于关系型数据库中的每一行数据记录。</li><li>字段(field)：相当于数据类型，例如字符串、整数、日期等。</li><li>映射(mapping)： 用于定义文档及其内部属性字段如何被索引及搜索的。</li><li>节点(Node)：单台服务器称为一个节点，默认情况下最好配置2+台保证可用性。</li><li>分片索引(Shard)：Elasticsearch会把数据分发到多台服务器上存储。这个过程成为分片(Sharding)。</li><li>索引副本(Replica)：副本主要是主分片的复制。在搜索请求阻塞在单个节点时，它可以像原来的主分片一样处理用户搜索请求。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="使用-Docker-安装"><a href="#使用-Docker-安装" class="headerlink" title="使用 Docker 安装"></a>使用 Docker 安装</h3><ul><li><p>文件目录结构：</p><pre><code>  Dockerfile // Docker安装文件  config/      elasticsearch.yml // Elasticsearch的基本配置      license.json // 在官网注册的Basic License      x-pack/          roles.yml // 定义角色</code></pre></li><li><p><code>Dockerfile</code></p><pre><code>  FROM elasticsearch:5.2.0    # Define working directory.  WORKDIR /tmp    # Define default command.  # CMD [&quot;/elasticsearch/bin/elasticsearch&quot;]  RUN /usr/share/elasticsearch/bin/elasticsearch-plugin install x-pack    # 使用IK分词器  ENV IK_VERSION 5.2.0  RUN wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v$IK_VERSION/elasticsearch-analysis-ik-$IK_VERSION.zip  RUN unzip elasticsearch-analysis-ik-$IK_VERSION.zip -d /usr/share/elasticsearch/plugins/ik/  RUN rm -f elasticsearch-analysis-ik-$IK_VERSION.zip    # Mount elasticsearch.yml config  # This is a tricky problem, x-pack configuration path is /etc/elasticsearch/ which follow the offical document,  # but elasticsearch configuration path is /usr/share/elasticsearch/config. I&#39;ve asked this issue in Github, still waiting for the answer.  # for now, just put them under both paths.  ADD config /usr/share/elasticsearch/config  ADD config /etc/elasticsearch    RUN set -ex \      &amp;&amp; for path in \          # /data/elasticsearch \          /etc/elasticsearch \          /data/logs/elasticsearch \      ; do \          mkdir -p &quot;$path&quot;; \          chown -R elasticsearch:elasticsearch &quot;$path&quot;; \      done    CMD [&quot;elasticsearch&quot;]    # Expose ports.  #   - 9200: HTTP  #   - 9300: transport  EXPOSE 9200  EXPOSE 9300  </code></pre></li><li><p><code>elastcisearch.yml</code></p><pre><code>  network.host: 0.0.0.0  path:    data: /usr/share/elasticsearch/data    logs: /data/logs/elasticsearch    node.name:   assets  cluster.name: assets-dev-1    xpack.security.audit.enabled: true  xpack.security.authc:  # Gold 以上 license 才支持 realms，所以此处只能使用匿名用户    anonymous:      username: anonymous_user      roles: assets_rw      authz_exception: true        # realms:    #   file1:    #     type: file    #     order: 0    #     cache.hash_algo: md5    #   native1:    #     type: native    #     order: 1</code></pre></li><li><p><code>x-pack/roles.yml</code></p><pre><code>  assets_rw:    run_as: [ &#39;elastic&#39; ]    cluster: [ &#39;all&#39; ]    &quot;indices&quot;:      - names: [ &#39;*&#39; ]        privileges: [ &#39;all&#39; ]         </code></pre></li><li><p><code>license.json</code></p><ul><li>注册地址：<code>https://www.elastic.co/subscriptions</code>， 获得Basic License后便可使用 Kibana来监控数据</li><li>安装方法：需跑起来Docker Container后，在服务器执行<code>curl -XPUT -u elastic &#39;http://&lt;host&gt;:&lt;port&gt;/_xpack/license&#39; -d @/path/to/license.json</code></li></ul></li></ul>]]></content>
    
    
    <summary type="html">Elasticsearch文档学习实践之路</summary>
    
    
    
    <category term="编程学习" scheme="https://ericyy.me/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Elasticsearch" scheme="https://ericyy.me/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch Mapping - Elasticsearch 学习实践 (2)</title>
    <link href="https://ericyy.me/2016-11-17-elasticsearch-02-mapping.html"/>
    <id>https://ericyy.me/2016-11-17-elasticsearch-02-mapping.html</id>
    <published>2016-11-17T05:00:00.000Z</published>
    <updated>2023-03-22T03:14:07.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h1><ul><li>Mapping是用于定义文档及其内部属性字段如何被索引及搜索的。</li></ul><h2 id="系统字段"><a href="#系统字段" class="headerlink" title="系统字段"></a>系统字段</h2><ul><li>首先了解下系统特别制定的字段及其用法。</li></ul><h3 id="结构定位字段"><a href="#结构定位字段" class="headerlink" title="结构定位字段"></a>结构定位字段</h3><ul><li>_index: 类似数据库的库名</li><li>_type: 类似数据库的表名</li><li>_id: 类似数据库中每条数据的ID</li><li>_uid: 结构是<code>&#123;type&#125;#&#123;id&#125;</code>，可用于直接准确查询某条数据</li></ul><h3 id="文档数据字段"><a href="#文档数据字段" class="headerlink" title="文档数据字段"></a>文档数据字段</h3><ul><li>_source: 原始数据JSON</li><li>_size: 原始数据JSON的大小</li></ul><h3 id="可用于索引查询的字段"><a href="#可用于索引查询的字段" class="headerlink" title="可用于索引查询的字段"></a>可用于索引查询的字段</h3><ul><li>_all: 将<code>_source</code>数据用空格切分保存后作索引（不建议保存，影响性能）</li><li>_field_names: 用于是否包含某字段查询</li></ul><h3 id="路由字段"><a href="#路由字段" class="headerlink" title="路由字段"></a>路由字段</h3><ul><li>_parent: 用于在两种数据类型之间创建父子关系</li><li>_routing: 用于路由到特定的分片(shard)</li></ul><h3 id="其他字段"><a href="#其他字段" class="headerlink" title="其他字段"></a>其他字段</h3><ul><li>_meta: 用于存储特定的信息，比如有效版本号、可调用的类函数等</li></ul><h2 id="用户定义字段"><a href="#用户定义字段" class="headerlink" title="用户定义字段"></a>用户定义字段</h2><ul><li><p>定义用户索引的文档字段属性，系统本身是提供动态mapping，也就是说，我们可以在不定义mapping的情况下直接导入，系统会根据用户的第一倒入生成mapping。</p></li><li><p>但如果文档相对复杂，还是建议完整设置动态mapping来避免异常错误。</p></li><li><p>Elasticsearch 为我们提供了常用的字段类型，包括：<code>text</code>, <code>keyword</code>, <code>date</code>, <code>boolean</code>, <code>long</code>, <code>integer</code>, <code>short</code>, <code>byte</code>, <code>double</code>, <code>float</code>, <code>binary</code>， 复杂点的<code>array</code>, <code>object</code>, <code>nested</code>, 用于定位的<code>geo_point</code>, <code>geo_shape</code>, 特殊的<code>ip</code>, <code>completion</code>, <code>token_count</code>, <code>murmur3</code>, <code>attachments</code>, <code>percolator</code>。</p></li><li><p>其中需要注意的是</p><ul><li><code>text</code>和<code>keyword</code>都是string， 前者会被当作文本分析并索引，可用于包含关键词搜索，后者会作为一个整体而被作为完全匹配搜索， 主要用于聚合、排序等功能使用。</li><li><code>array</code> 并非数据类型，仅仅作为数据类型标识。</li><li><code>object</code> 同<code>array</code> 仅作为数据类型标识，无任何意义。</li><li><code>nested</code> 等同于<code>object</code>数据类型，将数据结构的KEY扁平化如： <code>&quot;user.first&quot; : [ &quot;alice&quot;, &quot;john&quot; ],</code></li></ul></li></ul><h2 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h2><ul><li><code>index.mapping.total_fields.limit</code> 单个索引中字段数量的上限，默认<code>1000</code>。</li><li><code>index.mapping.depth.limit</code> 索引深度， 在数组和对象类型中的层级数量，默认<code>20</code>。</li><li><code>index.mapping.nested_fields.limit</code> 在对象类型中，扁平化的KEY的层级数量，默认<code>50</code>。</li></ul><h2 id="动态mapping"><a href="#动态mapping" class="headerlink" title="动态mapping"></a>动态mapping</h2><ul><li><p>系统根据用户的第一次倒入的数据生成mapping。</p></li><li><p><code>_default_ mapping</code>: 默认的mapping配置，会被任何新建的mapping继承。</p></li><li><p>以下是JSON字段在保存中默认转换的类型对照： (可配置 <code>&quot;&#123;data_type&#125;_detection&quot;: false</code> 来关闭对应的数据类型检测)</p><pre><code>  null : 不保存  true／false : boolean  float : float  integer : long  object : object   array : array  date : 须符合格式 &quot;yyyy/MM/dd HH:mm:ss Z||yyyy/MM/dd Z&quot; 的会被自动转换  string : 如果字段不符合date, long, double, text, 会被当作keyword</code></pre></li></ul><h3 id="动态模版"><a href="#动态模版" class="headerlink" title="动态模版"></a>动态模版</h3><ul><li><p>用户可自定义字段类型检测模版，在倒入数据的时候，根据条件，系统生成对应的mapping配置，示例：</p><pre><code>  PUT my_index  &#123;    &quot;mappings&quot;: &#123;      &quot;my_type&quot;: &#123;        &quot;dynamic_templates&quot;: [          &#123;            &quot;integers&quot;: &#123;              &quot;match_mapping_type&quot;: &quot;long&quot;,              &quot;mapping&quot;: &#123;                &quot;type&quot;: &quot;integer&quot;              &#125;            &#125;          &#125;,          &#123;            &quot;strings&quot;: &#123;              &quot;match_mapping_type&quot;: &quot;string&quot;,              &quot;mapping&quot;: &#123;                &quot;type&quot;: &quot;text&quot;,                &quot;fields&quot;: &#123;                  &quot;raw&quot;: &#123;                    &quot;type&quot;:  &quot;keyword&quot;,                    &quot;ignore_above&quot;: 256                  &#125;                &#125;              &#125;            &#125;          &#125;        ]      &#125;    &#125;  &#125;  PUT my_index/my_type/1  &#123;    &quot;my_integer&quot;: 5,     &quot;my_string&quot;: &quot;Some string&quot;   &#125;</code></pre></li><li><p>示例中，<code>match_mapping_type</code> 为条件匹配判断，类型还包含<code>match</code>, <code>match_pattern</code>, <code>unmatch</code>, <code>path_match</code>, <code>path_unmatch</code>。</p></li><li><p><code>mapping</code> 为匹配字段相应的调整内容。</p></li><li><p><code>match</code>, <code>unmatch</code>, <code>path_match</code>, <code>path_unmatch</code> 可用通配符来作为匹配或排除条件</p></li><li><p><code>match_pattern</code> 可调整<code>match</code> 行为来支持正则匹配，如：</p><p>  “match_pattern”: “regex”,<br>“match”: “^profit_\d+$”</p></li><li><p>特殊配置</p><ul><li>字段不用于排序的时候可以<code>&quot;norms&quot;: false,</code>来关闭它。</li><li>字段仅作用于排序聚合而不用于过滤查询的时候可以<code>&quot;index&quot;: false</code>来关闭它。</li></ul></li><li><p>更多示例，可参考官方文档：(dynamic-templates.html) [<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-templates.html]">https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-templates.html]</a></p></li></ul><h2 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h2><ul><li>同一个字段名称的配置在不同的type里边必须包含同样的mapping。除了个别字段，如：<code>copy_to</code>, <code>dynamic</code>, <code>enabled</code>, <code>ignore_above</code>, <code>include_in_all</code>, <code>properties</code>。</li></ul><p>官方mapping示例： 没啥好解释的，很简单。具体属性不明白的，查<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html">文档</a>比较好。</p><pre><code>    &#123;      &quot;mappings&quot;: &#123;        &quot;user&quot;: &#123;           &quot;_all&quot;:       &#123; &quot;enabled&quot;: false  &#125;,           &quot;properties&quot;: &#123;             &quot;title&quot;:    &#123; &quot;type&quot;: &quot;text&quot;  &#125;,             &quot;name&quot;:     &#123; &quot;type&quot;: &quot;text&quot;  &#125;,             &quot;age&quot;:      &#123; &quot;type&quot;: &quot;integer&quot; &#125;            &#125;        &#125;,        &quot;blogpost&quot;: &#123;           &quot;_all&quot;:       &#123; &quot;enabled&quot;: false  &#125;,           &quot;properties&quot;: &#123;             &quot;title&quot;:    &#123; &quot;type&quot;: &quot;text&quot;  &#125;,             &quot;body&quot;:     &#123; &quot;type&quot;: &quot;text&quot;  &#125;,             &quot;user_id&quot;:  &#123;              &quot;type&quot;:   &quot;keyword&quot;             &#125;,            &quot;created&quot;:  &#123;              &quot;type&quot;:   &quot;date&quot;,               &quot;format&quot;: &quot;strict_date_optional_time||epoch_millis&quot;            &#125;          &#125;        &#125;      &#125;    &#125;</code></pre>]]></content>
    
    
    <summary type="html">Elasticsearch文档学习实践之路</summary>
    
    
    
    <category term="编程学习" scheme="https://ericyy.me/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Elasticsearch" scheme="https://ericyy.me/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>RFC 2119 解读</title>
    <link href="https://ericyy.me/2016-10-25-rfc-2119.html"/>
    <id>https://ericyy.me/2016-10-25-rfc-2119.html</id>
    <published>2016-10-25T04:00:00.000Z</published>
    <updated>2023-03-22T03:14:07.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><pre><code>RFC2119 是技术文档中的规范用语要求，针对若干个关键词进行说明，解释其在文档中的具体用法。在使用中所有字母都必须是大写的。了解它的规定有利于解读英文文档的具体用意。</code></pre><h3 id="所有遵循该规定的文档都在开头包含以下文字："><a href="#所有遵循该规定的文档都在开头包含以下文字：" class="headerlink" title="所有遵循该规定的文档都在开头包含以下文字："></a>所有遵循该规定的文档都在开头包含以下文字：</h3><pre><code>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALLNOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;,  &quot;MAY&quot;, and&quot;OPTIONAL&quot; in this document are to be interpreted as described in[RFC 2119](https://tools.ietf.org/html/rfc2119).</code></pre><h4 id="1-MUST：等同于”REQUIRED“和”SHALL“。-必须使用。"><a href="#1-MUST：等同于”REQUIRED“和”SHALL“。-必须使用。" class="headerlink" title="1. MUST：等同于”REQUIRED“和”SHALL“。 必须使用。"></a>1. <code>MUST</code>：等同于”<code>REQUIRED</code>“和”<code>SHALL</code>“。 必须使用。</h4><h4 id="2-MUST-NOT：等同于”SHALL-NOT“。-必须避免使用。"><a href="#2-MUST-NOT：等同于”SHALL-NOT“。-必须避免使用。" class="headerlink" title="2. MUST NOT：等同于”SHALL NOT“。  必须避免使用。"></a>2. <code>MUST NOT</code>：等同于”<code>SHALL NOT</code>“。  必须避免使用。</h4><h4 id="3-SHOULD：等同于”RECOMMENDED“。-推荐使用方式，但在某些特定情况下可以忽略。如果需要采用不同的方式，请务必仔细斟酌。"><a href="#3-SHOULD：等同于”RECOMMENDED“。-推荐使用方式，但在某些特定情况下可以忽略。如果需要采用不同的方式，请务必仔细斟酌。" class="headerlink" title="3. SHOULD：等同于”RECOMMENDED“。  推荐使用方式，但在某些特定情况下可以忽略。如果需要采用不同的方式，请务必仔细斟酌。"></a>3. <code>SHOULD</code>：等同于”<code>RECOMMENDED</code>“。  推荐使用方式，但在某些特定情况下可以忽略。如果需要采用不同的方式，请务必仔细斟酌。</h4><h4 id="4-SHOULD-NOT：等同于”NOT-RECOMMENDED“。-推荐不使用方式，但在某些特定情况下可以忽略。如果需要采用不同的方式，请务必仔细斟酌。"><a href="#4-SHOULD-NOT：等同于”NOT-RECOMMENDED“。-推荐不使用方式，但在某些特定情况下可以忽略。如果需要采用不同的方式，请务必仔细斟酌。" class="headerlink" title="4. SHOULD NOT：等同于”NOT RECOMMENDED“。 推荐不使用方式，但在某些特定情况下可以忽略。如果需要采用不同的方式，请务必仔细斟酌。"></a>4. <code>SHOULD NOT</code>：等同于”<code>NOT RECOMMENDED</code>“。 推荐不使用方式，但在某些特定情况下可以忽略。如果需要采用不同的方式，请务必仔细斟酌。</h4><h4 id="5-MAY：等同于”OPTIONAL“。-可选可不选。"><a href="#5-MAY：等同于”OPTIONAL“。-可选可不选。" class="headerlink" title="5. MAY：等同于”OPTIONAL“。 可选可不选。"></a>5. <code>MAY</code>：等同于”<code>OPTIONAL</code>“。 可选可不选。</h4><h4 id="官方文档：-https-tools-ietf-org-html-rfc2119"><a href="#官方文档：-https-tools-ietf-org-html-rfc2119" class="headerlink" title="官方文档： https://tools.ietf.org/html/rfc2119"></a>官方文档： <a href="https://tools.ietf.org/html/rfc2119">https://tools.ietf.org/html/rfc2119</a></h4>]]></content>
    
    
    <summary type="html">在写文档的时候，使用特定的关键词来声明需求等级</summary>
    
    
    
    <category term="编程学习" scheme="https://ericyy.me/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="编程规范" scheme="https://ericyy.me/tags/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>简要说明语义化版本号的具体用法</title>
    <link href="https://ericyy.me/2016-10-25-semantic-versioning-2.html"/>
    <id>https://ericyy.me/2016-10-25-semantic-versioning-2.html</id>
    <published>2016-10-25T04:00:00.000Z</published>
    <updated>2023-03-22T03:14:07.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="版本格式：主版本号-次版本号-修订版本号，版本号递增规则如下："><a href="#版本格式：主版本号-次版本号-修订版本号，版本号递增规则如下：" class="headerlink" title="版本格式：主版本号.次版本号.修订版本号，版本号递增规则如下："></a>版本格式：主版本号.次版本号.修订版本号，版本号递增规则如下：</h3><ul><li><p><code>主版本号</code>：当你做了不兼容的 API 修改，</p></li><li><p><code>次版本号</code>：当你做了向下兼容的功能性新增，</p></li><li><p><code>修订版本号</code>：当你做了向下兼容的问题修正。</p></li><li><p><code>先行版本号</code>及<code>版本编译信息</code>可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p></li></ul><h3 id="具体要求："><a href="#具体要求：" class="headerlink" title="具体要求："></a>具体要求：</h3><ol><li><p>必须包含公共API，定义在代码或文档中。</p></li><li><p>格式必须是 <code>X.Y.Z</code>。 非负，从0开始。</p></li><li><p>每次代码修改必须调整版本号。</p></li><li><p><code>主版本号</code>为0时(0.Y.Z) 为开发阶段，可随意修整代码。</p></li><li><p>1.0.0 是公共API的起始版本号。</p></li><li><p><code>修订版本号</code>为修复BUG递增版本号，向后兼容。</p></li><li><p>新增功能后次版本号增长。必须保证向后兼容。<code>修订版本号</code>归零。</p></li><li><p>新增不能向后兼容的功能后，<code>主版本号</code>增长，<code>次版本号</code>及<code>修订版本号</code>归零。</p></li><li><p><code>先行版本号</code>，即已发布非正式的版本号标注。必须从1.0.0开始。 在版本号后以<code>-a.a...</code>的形式追加。 <code>a</code> 可为字母单词数字横杠(-)， 不可为空。范例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。</p></li><li><p><code>版本编译信息</code>追加。在先行版本号以<code>+b.b...</code>的形式追加。 <code>b</code>可为字母单词数字横杠(-)， 不可为空。范例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。</p></li><li><p>版本优先级。 从左到右依次比较。<code>先行版本号</code>及<code>版本编译信息</code>的比较中以<code>.</code>切割比较，有编号高于无编号，字母编号高于编号数字。范例：1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-alpha.beta &lt; 1.0.0-beta &lt; 1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0-rc.1 &lt; 1.0.0。</p></li></ol><p><em>基于官方文档2.0.0版本翻译解释</em></p><p>文档地址： <a href="http://semver.org/">http://semver.org/</a></p>]]></content>
    
    
    <summary type="html">简要说明语义化版本号的具体用法</summary>
    
    
    
    <category term="编程学习" scheme="https://ericyy.me/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="编程规范" scheme="https://ericyy.me/tags/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
</feed>
